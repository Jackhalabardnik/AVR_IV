
Z1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000016c  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000045  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000751  00000000  00000000  0000024d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000132  00000000  00000000  0000099e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000356  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000e28  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000129  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000119  00000000  00000000  00000fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  000010ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  7a:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <sendByte>:
#include <avr/io.h>
#include <util/delay.h>

void sendByte(char data)
{
	PORTB |= 0x02;								// Wysy³am flagê ENABLE
  82:	c1 9a       	sbi	0x18, 1	; 24
    PORTA = data;								// Wysy³am bajt
  84:	8b bb       	out	0x1b, r24	; 27
    PORTB &= 0xFD;								// Usuwam flagê ENABLE
  86:	c1 98       	cbi	0x18, 1	; 24
}
  88:	08 95       	ret

0000008a <sendCommand>:
#include <avr/io.h>
#include <util/delay.h>

void sendByte(char data)
{
	PORTB |= 0x02;								// Wysy³am flagê ENABLE
  8a:	c1 9a       	sbi	0x18, 1	; 24
    PORTA = data;								// Wysy³am bajt
  8c:	8b bb       	out	0x1b, r24	; 27
    PORTB &= 0xFD;								// Usuwam flagê ENABLE
  8e:	c1 98       	cbi	0x18, 1	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  90:	82 e4       	ldi	r24, 0x42	; 66
  92:	8a 95       	dec	r24
  94:	f1 f7       	brne	.-4      	; 0x92 <sendCommand+0x8>

void sendCommand(char data)
{
	sendByte(data);								// Wysy³am komendê
	_delay_us(50);								// Czekam na przetworzenie komendy
}
  96:	08 95       	ret

00000098 <sendChar>:
#include <avr/io.h>
#include <util/delay.h>

void sendByte(char data)
{
	PORTB |= 0x02;								// Wysy³am flagê ENABLE
  98:	c1 9a       	sbi	0x18, 1	; 24
    PORTA = data;								// Wysy³am bajt
  9a:	8b bb       	out	0x1b, r24	; 27
    PORTB &= 0xFD;								// Usuwam flagê ENABLE
  9c:	c1 98       	cbi	0x18, 1	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	8c ed       	ldi	r24, 0xDC	; 220
  a0:	95 e0       	ldi	r25, 0x05	; 5
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <sendChar+0xa>

void sendChar(char data)
{
	sendByte(data);								// Wysy³am znak
	_delay_us(1500);							// Czekam na wypisanie znaku
}
  a6:	08 95       	ret

000000a8 <main>:
  a8:	88 e9       	ldi	r24, 0x98	; 152
  aa:	9a e3       	ldi	r25, 0x3A	; 58
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x4>

int main(void)
{
	_delay_ms(15); 								// Czekam a¿ wyœwietlacz LCD zostanie zainicjalizowany

	DDRA = 0xFF;								// Ustawiam ca³¹ liniê A i czêœæ linii B jako wyjœcie
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	8a bb       	out	0x1a, r24	; 26
	DDRB |= 0x03;
  b4:	87 b3       	in	r24, 0x17	; 23
  b6:	83 60       	ori	r24, 0x03	; 3
  b8:	87 bb       	out	0x17, r24	; 23
#include <avr/io.h>
#include <util/delay.h>

void sendByte(char data)
{
	PORTB |= 0x02;								// Wysy³am flagê ENABLE
  ba:	c1 9a       	sbi	0x18, 1	; 24
    PORTA = data;								// Wysy³am bajt
  bc:	80 e3       	ldi	r24, 0x30	; 48
  be:	8b bb       	out	0x1b, r24	; 27
    PORTB &= 0xFD;								// Usuwam flagê ENABLE
  c0:	c1 98       	cbi	0x18, 1	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  c2:	92 e4       	ldi	r25, 0x42	; 66
  c4:	29 2f       	mov	r18, r25
  c6:	2a 95       	dec	r18
  c8:	f1 f7       	brne	.-4      	; 0xc6 <main+0x1e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ca:	e8 e8       	ldi	r30, 0x88	; 136
  cc:	f3 e1       	ldi	r31, 0x13	; 19
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x26>
#include <avr/io.h>
#include <util/delay.h>

void sendByte(char data)
{
	PORTB |= 0x02;								// Wysy³am flagê ENABLE
  d2:	c1 9a       	sbi	0x18, 1	; 24
    PORTA = data;								// Wysy³am bajt
  d4:	8b bb       	out	0x1b, r24	; 27
    PORTB &= 0xFD;								// Usuwam flagê ENABLE
  d6:	c1 98       	cbi	0x18, 1	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  d8:	29 2f       	mov	r18, r25
  da:	2a 95       	dec	r18
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x32>
#include <avr/io.h>
#include <util/delay.h>

void sendByte(char data)
{
	PORTB |= 0x02;								// Wysy³am flagê ENABLE
  de:	26 e8       	ldi	r18, 0x86	; 134
  e0:	2a 95       	dec	r18
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x38>
  e4:	c1 9a       	sbi	0x18, 1	; 24
    PORTA = data;								// Wysy³am bajt
  e6:	8b bb       	out	0x1b, r24	; 27
    PORTB &= 0xFD;								// Usuwam flagê ENABLE
  e8:	c1 98       	cbi	0x18, 1	; 24
  ea:	89 2f       	mov	r24, r25
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x44>
#include <avr/io.h>
#include <util/delay.h>

void sendByte(char data)
{
	PORTB |= 0x02;								// Wysy³am flagê ENABLE
  f0:	c1 9a       	sbi	0x18, 1	; 24
    PORTA = data;								// Wysy³am bajt
  f2:	88 e3       	ldi	r24, 0x38	; 56
  f4:	8b bb       	out	0x1b, r24	; 27
    PORTB &= 0xFD;								// Usuwam flagê ENABLE
  f6:	c1 98       	cbi	0x18, 1	; 24
  f8:	89 2f       	mov	r24, r25
  fa:	8a 95       	dec	r24
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x52>
#include <avr/io.h>
#include <util/delay.h>

void sendByte(char data)
{
	PORTB |= 0x02;								// Wysy³am flagê ENABLE
  fe:	c1 9a       	sbi	0x18, 1	; 24
    PORTA = data;								// Wysy³am bajt
 100:	88 e0       	ldi	r24, 0x08	; 8
 102:	8b bb       	out	0x1b, r24	; 27
    PORTB &= 0xFD;								// Usuwam flagê ENABLE
 104:	c1 98       	cbi	0x18, 1	; 24
 106:	89 2f       	mov	r24, r25
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x60>
#include <avr/io.h>
#include <util/delay.h>

void sendByte(char data)
{
	PORTB |= 0x02;								// Wysy³am flagê ENABLE
 10c:	c1 9a       	sbi	0x18, 1	; 24
    PORTA = data;								// Wysy³am bajt
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	8b bb       	out	0x1b, r24	; 27
    PORTB &= 0xFD;								// Usuwam flagê ENABLE
 112:	c1 98       	cbi	0x18, 1	; 24
 114:	89 2f       	mov	r24, r25
 116:	8a 95       	dec	r24
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x6e>
#include <avr/io.h>
#include <util/delay.h>

void sendByte(char data)
{
	PORTB |= 0x02;								// Wysy³am flagê ENABLE
 11a:	c1 9a       	sbi	0x18, 1	; 24
    PORTA = data;								// Wysy³am bajt
 11c:	87 e0       	ldi	r24, 0x07	; 7
 11e:	8b bb       	out	0x1b, r24	; 27
    PORTB &= 0xFD;								// Usuwam flagê ENABLE
 120:	c1 98       	cbi	0x18, 1	; 24
 122:	89 2f       	mov	r24, r25
 124:	8a 95       	dec	r24
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x7c>
#include <avr/io.h>
#include <util/delay.h>

void sendByte(char data)
{
	PORTB |= 0x02;								// Wysy³am flagê ENABLE
 128:	c1 9a       	sbi	0x18, 1	; 24
    PORTA = data;								// Wysy³am bajt
 12a:	8f e0       	ldi	r24, 0x0F	; 15
 12c:	8b bb       	out	0x1b, r24	; 27
    PORTB &= 0xFD;								// Usuwam flagê ENABLE
 12e:	c1 98       	cbi	0x18, 1	; 24
 130:	89 2f       	mov	r24, r25
 132:	8a 95       	dec	r24
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x8a>
#include <avr/io.h>
#include <util/delay.h>

void sendByte(char data)
{
	PORTB |= 0x02;								// Wysy³am flagê ENABLE
 136:	c1 9a       	sbi	0x18, 1	; 24
    PORTA = data;								// Wysy³am bajt
 138:	8f e8       	ldi	r24, 0x8F	; 143
 13a:	8b bb       	out	0x1b, r24	; 27
    PORTB &= 0xFD;								// Usuwam flagê ENABLE
 13c:	c1 98       	cbi	0x18, 1	; 24
 13e:	9a 95       	dec	r25
 140:	f1 f7       	brne	.-4      	; 0x13e <main+0x96>
	sendCommand(0x08);							// Wy³¹czam wyœwietlacz zgodnie z dokumentacj¹
	sendCommand(0x01);							// Czyszczê wyœwietlacz
	sendCommand(0x07);							// Ustawiam kierunek wyprowadzania tekstu i sposób wyprowadzania na wyœwietlacz
	sendCommand(0x0F);							// W³¹czam wyœwietlacz i ustawiam znak na pozycji kursora na miganie
	sendCommand(0x8F);							// Ustawiam kursor na odpowiedniej pozycji
	PORTB |= 0x01;								// Prze³¹czam LCD w tryb wyprowadzania danych;
 142:	c0 9a       	sbi	0x18, 0	; 24
 144:	e0 e6       	ldi	r30, 0x60	; 96
 146:	f0 e0       	ldi	r31, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 148:	2c ed       	ldi	r18, 0xDC	; 220
 14a:	35 e0       	ldi	r19, 0x05	; 5
 14c:	07 c0       	rjmp	.+14     	; 0x15c <main+0xb4>

	
	char *nazwisko = "Wojcik";
	while(*nazwisko)
	{
		sendChar(*nazwisko++);	
 14e:	31 96       	adiw	r30, 0x01	; 1
#include <avr/io.h>
#include <util/delay.h>

void sendByte(char data)
{
	PORTB |= 0x02;								// Wysy³am flagê ENABLE
 150:	c1 9a       	sbi	0x18, 1	; 24
    PORTA = data;								// Wysy³am bajt
 152:	8b bb       	out	0x1b, r24	; 27
    PORTB &= 0xFD;								// Usuwam flagê ENABLE
 154:	c1 98       	cbi	0x18, 1	; 24
 156:	c9 01       	movw	r24, r18
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <main+0xb0>
	sendCommand(0x8F);							// Ustawiam kursor na odpowiedniej pozycji
	PORTB |= 0x01;								// Prze³¹czam LCD w tryb wyprowadzania danych;

	
	char *nazwisko = "Wojcik";
	while(*nazwisko)
 15c:	80 81       	ld	r24, Z
 15e:	88 23       	and	r24, r24
 160:	b1 f7       	brne	.-20     	; 0x14e <main+0xa6>
	{
		sendChar(*nazwisko++);	
	}
}
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	08 95       	ret

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
