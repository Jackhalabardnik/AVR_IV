
Z3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000284  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800066  00800066  0000031e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000097  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000048a  00000000  00000000  000003d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000163  00000000  00000000  0000085f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d0  00000000  00000000  000009c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00000c94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000167  00000000  00000000  00000d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e6  00000000  00000000  00000e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000f61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_1>
   8:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_2>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000054 <transcode>:
  54:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e4 e8       	ldi	r30, 0x84	; 132
  78:	f2 e0       	ldi	r31, 0x02	; 2
  7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>

00000086 <__do_clear_bss>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	a6 e6       	ldi	r26, 0x66	; 102
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a8 36       	cpi	r26, 0x68	; 104
  92:	b1 07       	cpc	r27, r17
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 00 01 	call	0x200	; 0x200 <main>
  9a:	0c 94 40 01 	jmp	0x280	; 0x280 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <sendHalfByte>:

const char transcode[] PROGMEM  = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' }; // Umieszczam dane w pamiêci programu

void sendHalfByte(char data)
{		
	PORTA |= 0x02; 								// Wysy³am flagê ENABLE
  a2:	d9 9a       	sbi	0x1b, 1	; 27
	PORTA = (PORTA & 0x0F) | (data & 0xF0);		// Wysy³am pó³ bajta
  a4:	9b b3       	in	r25, 0x1b	; 27
  a6:	80 7f       	andi	r24, 0xF0	; 240
  a8:	9f 70       	andi	r25, 0x0F	; 15
  aa:	89 2b       	or	r24, r25
  ac:	8b bb       	out	0x1b, r24	; 27
	PORTA &= 0xFD;								// Usuwam flagê ENABLE
  ae:	d9 98       	cbi	0x1b, 1	; 27
}
  b0:	08 95       	ret

000000b2 <sendByte>:

void sendByte(char data)
{
  b2:	1f 93       	push	r17
  b4:	18 2f       	mov	r17, r24
	sendHalfByte(data);							// Wysy³am górn¹ po³owê bajtu
  b6:	0e 94 51 00 	call	0xa2	; 0xa2 <sendHalfByte>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	8a 95       	dec	r24
  be:	f1 f7       	brne	.-4      	; 0xbc <sendByte+0xa>
	_delay_us(2);								// OpóŸnienie w celu wykrycia stanu "0" na pinie ENABLE
	sendHalfByte(data << 4);					// Wysy³am doln¹ po³owê bajtu
  c0:	81 2f       	mov	r24, r17
  c2:	82 95       	swap	r24
  c4:	80 7f       	andi	r24, 0xF0	; 240
  c6:	0e 94 51 00 	call	0xa2	; 0xa2 <sendHalfByte>
}
  ca:	1f 91       	pop	r17
  cc:	08 95       	ret

000000ce <sendCommand>:

void sendCommand(char data)
{
	sendByte(data);								// Wysy³am komendê
  ce:	0e 94 59 00 	call	0xb2	; 0xb2 <sendByte>
  d2:	82 e4       	ldi	r24, 0x42	; 66
  d4:	8a 95       	dec	r24
  d6:	f1 f7       	brne	.-4      	; 0xd4 <sendCommand+0x6>
	_delay_us(50);								// Czekam na przetworzenie komendy
}
  d8:	08 95       	ret

000000da <sendChar>:

void sendChar(char data)
{
	sendByte(data);								// Wysy³am znak
  da:	0e 94 59 00 	call	0xb2	; 0xb2 <sendByte>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  de:	8c ed       	ldi	r24, 0xDC	; 220
  e0:	95 e0       	ldi	r25, 0x05	; 5
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <sendChar+0x8>
	_delay_us(1500);							// Czekam na wypisanie znaku
}
  e6:	08 95       	ret

000000e8 <__vector_1>:

ISR (INT0_vect) 								// Przerwanie INT0 
{
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	2f 93       	push	r18
  f4:	3f 93       	push	r19
  f6:	4f 93       	push	r20
  f8:	5f 93       	push	r21
  fa:	6f 93       	push	r22
  fc:	7f 93       	push	r23
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	af 93       	push	r26
 104:	bf 93       	push	r27
 106:	ef 93       	push	r30
 108:	ff 93       	push	r31
	if(counter < 5)								// Je¿eli nie napotka³em koñca tablicy to wypisujê kolejn¹ literê
 10a:	80 91 66 00 	lds	r24, 0x0066
 10e:	90 91 67 00 	lds	r25, 0x0067
 112:	05 97       	sbiw	r24, 0x05	; 5
 114:	9c f5       	brge	.+102    	; 0x17c <__vector_1+0x94>
	{
		if(counter > 0)
 116:	80 91 66 00 	lds	r24, 0x0066
 11a:	90 91 67 00 	lds	r25, 0x0067
 11e:	18 16       	cp	r1, r24
 120:	19 06       	cpc	r1, r25
 122:	1c f4       	brge	.+6      	; 0x12a <__vector_1+0x42>
		{
			sendChar(' ');						// Je¿eli trzeba wypisujê spacjê
 124:	80 e2       	ldi	r24, 0x20	; 32
 126:	0e 94 6d 00 	call	0xda	; 0xda <sendChar>
		}								
																						// Pobieram dane z pamiêci programu
		sendChar(pgm_read_byte_near(transcode + (data[counter] >> 4)));					// Wypisujê górn¹ po³owê 
 12a:	e0 91 66 00 	lds	r30, 0x0066
 12e:	f0 91 67 00 	lds	r31, 0x0067
 132:	e0 5a       	subi	r30, 0xA0	; 160
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	e0 81       	ld	r30, Z
 138:	e2 95       	swap	r30
 13a:	ef 70       	andi	r30, 0x0F	; 15
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	ec 5a       	subi	r30, 0xAC	; 172
 140:	ff 4f       	sbci	r31, 0xFF	; 255
 142:	e4 91       	lpm	r30, Z+
 144:	8e 2f       	mov	r24, r30
 146:	0e 94 6d 00 	call	0xda	; 0xda <sendChar>
		sendChar(pgm_read_byte_near(transcode + (data[counter] & 0x0F)));				// Wypisujê doln¹ po³owê 
 14a:	e0 91 66 00 	lds	r30, 0x0066
 14e:	f0 91 67 00 	lds	r31, 0x0067
 152:	e0 5a       	subi	r30, 0xA0	; 160
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	e0 81       	ld	r30, Z
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	ef 70       	andi	r30, 0x0F	; 15
 15c:	f0 70       	andi	r31, 0x00	; 0
 15e:	ec 5a       	subi	r30, 0xAC	; 172
 160:	ff 4f       	sbci	r31, 0xFF	; 255
 162:	e4 91       	lpm	r30, Z+
 164:	8e 2f       	mov	r24, r30
 166:	0e 94 6d 00 	call	0xda	; 0xda <sendChar>
		counter++;
 16a:	80 91 66 00 	lds	r24, 0x0066
 16e:	90 91 67 00 	lds	r25, 0x0067
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	90 93 67 00 	sts	0x0067, r25
 178:	80 93 66 00 	sts	0x0066, r24
	}
}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	bf 91       	pop	r27
 182:	af 91       	pop	r26
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	7f 91       	pop	r23
 18a:	6f 91       	pop	r22
 18c:	5f 91       	pop	r21
 18e:	4f 91       	pop	r20
 190:	3f 91       	pop	r19
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <__vector_2>:

ISR (INT1_vect) 								// Przerwanie INT1
{
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
	PORTA &= 0xFE;								// Prze³¹czam LCD w tryb wprowadzania komend
 1c0:	d8 98       	cbi	0x1b, 0	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	8a 95       	dec	r24
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <__vector_2+0x26>
	_delay_us(2);								// OpóŸnienie w celu wykrycia stanu "0" na pinie RS
	sendCommand(0x01);							// Czyszczê wyœwietlacz
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	sendCommand(0x90);							// Ustawiam kursor na odpowiedniej pozycji
 1ce:	80 e9       	ldi	r24, 0x90	; 144
 1d0:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	counter = 0;								// Resetujê licznik
 1d4:	10 92 67 00 	sts	0x0067, r1
 1d8:	10 92 66 00 	sts	0x0066, r1
	PORTA |= 0x01;								// Prze³¹czam LCD w tryb wprowadzania danych
 1dc:	d8 9a       	sbi	0x1b, 0	; 27
}
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	4f 91       	pop	r20
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <main>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 200:	88 e9       	ldi	r24, 0x98	; 152
 202:	9a e3       	ldi	r25, 0x3A	; 58
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <main+0x4>

int main(void)
{
	_delay_ms(15); 								// Czekam a¿ wyœwietlacz LCD zostanie zainicjalizowany

	DDRA |= 0xF3;								// Ustawiam ca³¹ liniê C i czêœæ linii A jako wyjœcie
 208:	8a b3       	in	r24, 0x1a	; 26
 20a:	83 6f       	ori	r24, 0xF3	; 243
 20c:	8a bb       	out	0x1a, r24	; 26
	DDRC |= 0xFF;
 20e:	84 b3       	in	r24, 0x14	; 20
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	84 bb       	out	0x14, r24	; 20

	PORTD |= 0x0C;								// podci¹gam 2 i 3 PIND pod zasilanie
 214:	82 b3       	in	r24, 0x12	; 18
 216:	8c 60       	ori	r24, 0x0C	; 12
 218:	82 bb       	out	0x12, r24	; 18

	MCUCR |= 0x0A;								// Ustawienie aktywacji obu przerwañ w tryb falling-edge;
 21a:	85 b7       	in	r24, 0x35	; 53
 21c:	8a 60       	ori	r24, 0x0A	; 10
 21e:	85 bf       	out	0x35, r24	; 53

	GICR |= 0xC0;								// W³¹czenie przerwañ INT0 i INT1
 220:	8b b7       	in	r24, 0x3b	; 59
 222:	80 6c       	ori	r24, 0xC0	; 192
 224:	8b bf       	out	0x3b, r24	; 59

	
	sendHalfByte(0x30);							// Inicjalizacja standardowymi bajtami
 226:	80 e3       	ldi	r24, 0x30	; 48
 228:	0e 94 51 00 	call	0xa2	; 0xa2 <sendHalfByte>
 22c:	88 e8       	ldi	r24, 0x88	; 136
 22e:	93 e1       	ldi	r25, 0x13	; 19
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <main+0x30>
	_delay_ms(5);								// Czekam zgodnie z dokumentacj¹
	sendHalfByte(0x30);							
 234:	80 e3       	ldi	r24, 0x30	; 48
 236:	0e 94 51 00 	call	0xa2	; 0xa2 <sendHalfByte>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 23a:	86 e8       	ldi	r24, 0x86	; 134
 23c:	8a 95       	dec	r24
 23e:	f1 f7       	brne	.-4      	; 0x23c <main+0x3c>
	_delay_us(101);
	sendCommand(0x32);
 240:	82 e3       	ldi	r24, 0x32	; 50
 242:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	sendCommand(0x28);							// Ustawiam tryb 2 linii i znaków 5x8
 246:	88 e2       	ldi	r24, 0x28	; 40
 248:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	sendCommand(0x08);							// Wy³¹czam wyœwietlacz zgodnie z dokumentacj¹
 24c:	88 e0       	ldi	r24, 0x08	; 8
 24e:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	sendCommand(0x01);							// Czyszczê wyœwietlacz
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	sendCommand(0x07);							// Ustawiam kierunek wyprowadzania tekstu i sposób wyprowadzania na wyœwietlacz
 258:	87 e0       	ldi	r24, 0x07	; 7
 25a:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	sendCommand(0x0D);							// W³¹czam wyœwietlacz i ustawiam znak na pozycji kursora na miganie
 25e:	8d e0       	ldi	r24, 0x0D	; 13
 260:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	sendCommand(0x90);							// Ustawiam kursor na odpowiedniej pozycji
 264:	80 e9       	ldi	r24, 0x90	; 144
 266:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	PORTA |= 0x01;								// Prze³¹czam LCD w tryb wprowadzania danych
 26a:	d8 9a       	sbi	0x1b, 0	; 27

	sei();										// W³¹czam obs³uge przerwañ
 26c:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 26e:	20 e5       	ldi	r18, 0x50	; 80
 270:	33 ec       	ldi	r19, 0xC3	; 195

	while(1)
	{
		PORTC ^= 0xFF;
 272:	85 b3       	in	r24, 0x15	; 21
 274:	80 95       	com	r24
 276:	85 bb       	out	0x15, r24	; 21
 278:	c9 01       	movw	r24, r18
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <main+0x7a>
 27e:	f9 cf       	rjmp	.-14     	; 0x272 <main+0x72>

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
