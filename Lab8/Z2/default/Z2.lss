
Z2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000028e  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000089  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000446  00000000  00000000  00000337  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000158  00000000  00000000  0000077d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002c0  00000000  00000000  000008d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000b98  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000167  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000de  00000000  00000000  00000d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000e5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_1>
   8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_2>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <imie>:
  54:	4a 61 63 65 6b 00                                   Jacek.

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_clear_bss>:
  66:	10 e0       	ldi	r17, 0x00	; 0
  68:	a0 e6       	ldi	r26, 0x60	; 96
  6a:	b0 e0       	ldi	r27, 0x00	; 0
  6c:	01 c0       	rjmp	.+2      	; 0x70 <.do_clear_bss_start>

0000006e <.do_clear_bss_loop>:
  6e:	1d 92       	st	X+, r1

00000070 <.do_clear_bss_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	e1 f7       	brne	.-8      	; 0x6e <.do_clear_bss_loop>
  76:	0e 94 cb 00 	call	0x196	; 0x196 <main>
  7a:	0c 94 0b 01 	jmp	0x216	; 0x216 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <sendHalfByte>:

const char imie[] PROGMEM = "Jacek";			// Umieszczam imiê w pamiêci programu

void sendHalfByte(char data)
{		
	PORTA |= 0x02; 								// Wysy³am flagê ENABLE
  82:	d9 9a       	sbi	0x1b, 1	; 27
	PORTA = (PORTA & 0x0F) | (data & 0xF0);		// Wysy³am pó³ bajta
  84:	9b b3       	in	r25, 0x1b	; 27
  86:	80 7f       	andi	r24, 0xF0	; 240
  88:	9f 70       	andi	r25, 0x0F	; 15
  8a:	89 2b       	or	r24, r25
  8c:	8b bb       	out	0x1b, r24	; 27
	PORTA &= 0xFD;								// Usuwam flagê ENABLE
  8e:	d9 98       	cbi	0x1b, 1	; 27
}
  90:	08 95       	ret

00000092 <sendByte>:

void sendByte(char data)
{
  92:	1f 93       	push	r17
  94:	18 2f       	mov	r17, r24
	sendHalfByte(data);							// Wysy³am górn¹ po³owê bajtu
  96:	0e 94 41 00 	call	0x82	; 0x82 <sendHalfByte>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <sendByte+0xa>
	_delay_us(2);								// OpóŸnienie w celu wykrycia stanu "0" na pinie ENABLE
	sendHalfByte(data << 4);					// Wysy³am doln¹ po³owê bajtu
  a0:	81 2f       	mov	r24, r17
  a2:	82 95       	swap	r24
  a4:	80 7f       	andi	r24, 0xF0	; 240
  a6:	0e 94 41 00 	call	0x82	; 0x82 <sendHalfByte>
}
  aa:	1f 91       	pop	r17
  ac:	08 95       	ret

000000ae <sendCommand>:

void sendCommand(char data)
{
	sendByte(data);								// Wysy³am komendê
  ae:	0e 94 49 00 	call	0x92	; 0x92 <sendByte>
  b2:	82 e4       	ldi	r24, 0x42	; 66
  b4:	8a 95       	dec	r24
  b6:	f1 f7       	brne	.-4      	; 0xb4 <sendCommand+0x6>
	_delay_us(50);								// Czekam na przetworzenie komendy
}
  b8:	08 95       	ret

000000ba <sendChar>:

void sendChar(char data)
{
	sendByte(data);								// Wysy³am znak
  ba:	0e 94 49 00 	call	0x92	; 0x92 <sendByte>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  be:	8c ed       	ldi	r24, 0xDC	; 220
  c0:	95 e0       	ldi	r25, 0x05	; 5
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <sendChar+0x8>
	_delay_us(1500);							// Czekam na wypisanie znaku
}
  c6:	08 95       	ret

000000c8 <__vector_1>:

ISR (INT0_vect) 								// Przerwanie INT0 
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	3f 93       	push	r19
  d6:	4f 93       	push	r20
  d8:	5f 93       	push	r21
  da:	6f 93       	push	r22
  dc:	7f 93       	push	r23
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	af 93       	push	r26
  e4:	bf 93       	push	r27
  e6:	ef 93       	push	r30
  e8:	ff 93       	push	r31
	char byte = pgm_read_byte_near(imie + counter); // Pobieram dane z pamiêci programu
  ea:	e0 91 60 00 	lds	r30, 0x0060
  ee:	f0 91 61 00 	lds	r31, 0x0061
  f2:	ec 5a       	subi	r30, 0xAC	; 172
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	84 91       	lpm	r24, Z+
	
	if(byte)							// Je¿eli nie napotka³em koñca imienia to wypisujê kolejn¹ literê
  f8:	88 23       	and	r24, r24
  fa:	59 f0       	breq	.+22     	; 0x112 <__vector_1+0x4a>
	{
		sendChar(byte);
  fc:	0e 94 5d 00 	call	0xba	; 0xba <sendChar>
		counter++;
 100:	80 91 60 00 	lds	r24, 0x0060
 104:	90 91 61 00 	lds	r25, 0x0061
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	90 93 61 00 	sts	0x0061, r25
 10e:	80 93 60 00 	sts	0x0060, r24
	}
}
 112:	ff 91       	pop	r31
 114:	ef 91       	pop	r30
 116:	bf 91       	pop	r27
 118:	af 91       	pop	r26
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	7f 91       	pop	r23
 120:	6f 91       	pop	r22
 122:	5f 91       	pop	r21
 124:	4f 91       	pop	r20
 126:	3f 91       	pop	r19
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_2>:

ISR (INT1_vect) 								// Przerwanie INT1
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
	PORTA &= 0xFE;								// Prze³¹czam LCD w tryb wprowadzania komend
 156:	d8 98       	cbi	0x1b, 0	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	8a 95       	dec	r24
 15c:	f1 f7       	brne	.-4      	; 0x15a <__vector_2+0x26>
	_delay_us(2);								// OpóŸnienie w celu wykrycia stanu "0" na pinie RS
	sendCommand(0x01);							// Czyszczê wyœwietlacz
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 57 00 	call	0xae	; 0xae <sendCommand>
	sendCommand(0x90);							// Ustawiam kursor na odpowiedniej pozycji
 164:	80 e9       	ldi	r24, 0x90	; 144
 166:	0e 94 57 00 	call	0xae	; 0xae <sendCommand>
	counter = 0;								// Resetujê licznik
 16a:	10 92 61 00 	sts	0x0061, r1
 16e:	10 92 60 00 	sts	0x0060, r1
	PORTA |= 0x01;								// Prze³¹czam LCD w tryb wprowadzania danych
 172:	d8 9a       	sbi	0x1b, 0	; 27
}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <main>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 196:	88 e9       	ldi	r24, 0x98	; 152
 198:	9a e3       	ldi	r25, 0x3A	; 58
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <main+0x4>

int main(void)
{
	_delay_ms(15); 								// Czekam a¿ wyœwietlacz LCD zostanie zainicjalizowany

	DDRA |= 0xF3;								// Ustawiam ca³¹ liniê C i czêœæ linii A jako wyjœcie
 19e:	8a b3       	in	r24, 0x1a	; 26
 1a0:	83 6f       	ori	r24, 0xF3	; 243
 1a2:	8a bb       	out	0x1a, r24	; 26
	DDRC |= 0xFF;
 1a4:	84 b3       	in	r24, 0x14	; 20
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	84 bb       	out	0x14, r24	; 20

	PORTD |= 0x0C;								// podci¹gam 2 i 3 PIND pod zasilanie
 1aa:	82 b3       	in	r24, 0x12	; 18
 1ac:	8c 60       	ori	r24, 0x0C	; 12
 1ae:	82 bb       	out	0x12, r24	; 18

	MCUCR |= 0x0A;								// Ustawienie aktywacji obu przerwañ w tryb falling-edge;
 1b0:	85 b7       	in	r24, 0x35	; 53
 1b2:	8a 60       	ori	r24, 0x0A	; 10
 1b4:	85 bf       	out	0x35, r24	; 53

	GICR |= 0xC0;								// W³¹czenie przerwañ INT0 i INT1
 1b6:	8b b7       	in	r24, 0x3b	; 59
 1b8:	80 6c       	ori	r24, 0xC0	; 192
 1ba:	8b bf       	out	0x3b, r24	; 59

	
	sendHalfByte(0x30);							// Inicjalizacja standardowymi bajtami
 1bc:	80 e3       	ldi	r24, 0x30	; 48
 1be:	0e 94 41 00 	call	0x82	; 0x82 <sendHalfByte>
 1c2:	88 e8       	ldi	r24, 0x88	; 136
 1c4:	93 e1       	ldi	r25, 0x13	; 19
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0x30>
	_delay_ms(5);								// Czekam zgodnie z dokumentacj¹
	sendHalfByte(0x30);							
 1ca:	80 e3       	ldi	r24, 0x30	; 48
 1cc:	0e 94 41 00 	call	0x82	; 0x82 <sendHalfByte>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1d0:	86 e8       	ldi	r24, 0x86	; 134
 1d2:	8a 95       	dec	r24
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <main+0x3c>
	_delay_us(101);
	sendCommand(0x32);
 1d6:	82 e3       	ldi	r24, 0x32	; 50
 1d8:	0e 94 57 00 	call	0xae	; 0xae <sendCommand>
	sendCommand(0x28);							// Ustawiam tryb 2 linii i znaków 5x8
 1dc:	88 e2       	ldi	r24, 0x28	; 40
 1de:	0e 94 57 00 	call	0xae	; 0xae <sendCommand>
	sendCommand(0x08);							// Wy³¹czam wyœwietlacz zgodnie z dokumentacj¹
 1e2:	88 e0       	ldi	r24, 0x08	; 8
 1e4:	0e 94 57 00 	call	0xae	; 0xae <sendCommand>
	sendCommand(0x01);							// Czyszczê wyœwietlacz
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 57 00 	call	0xae	; 0xae <sendCommand>
	sendCommand(0x07);							// Ustawiam kierunek wyprowadzania tekstu i sposób wyprowadzania na wyœwietlacz
 1ee:	87 e0       	ldi	r24, 0x07	; 7
 1f0:	0e 94 57 00 	call	0xae	; 0xae <sendCommand>
	sendCommand(0x0D);							// W³¹czam wyœwietlacz i ustawiam znak na pozycji kursora na miganie
 1f4:	8d e0       	ldi	r24, 0x0D	; 13
 1f6:	0e 94 57 00 	call	0xae	; 0xae <sendCommand>
	sendCommand(0x90);							// Ustawiam kursor na odpowiedniej pozycji
 1fa:	80 e9       	ldi	r24, 0x90	; 144
 1fc:	0e 94 57 00 	call	0xae	; 0xae <sendCommand>
	PORTA |= 0x01;								// Prze³¹czam LCD w tryb wprowadzania danych
 200:	d8 9a       	sbi	0x1b, 0	; 27

	sei();										// W³¹czam obs³uge przerwañ
 202:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 204:	20 e5       	ldi	r18, 0x50	; 80
 206:	33 ec       	ldi	r19, 0xC3	; 195

	while(1)
	{
		PORTC ^= 0xFF;
 208:	85 b3       	in	r24, 0x15	; 21
 20a:	80 95       	com	r24
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	c9 01       	movw	r24, r18
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <main+0x7a>
 214:	f9 cf       	rjmp	.-14     	; 0x208 <main+0x72>

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
