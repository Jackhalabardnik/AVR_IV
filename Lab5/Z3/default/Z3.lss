
Z3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000234  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000234  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  000002ca  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000073  00000000  00000000  000002ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000157  00000000  00000000  0000035d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d1  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021a  00000000  00000000  00000585  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  000007a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000120  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ed 00 	call	0x1da	; 0x1da <main>
  8a:	0c 94 18 01 	jmp	0x230	; 0x230 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_7>:
#include <avr/interrupt.h>

const int czas_trwania_przebiegu_1 = 10000;  // 0,16s
volatile int czas_trwania_przebiegu_2;

ISR (TIMER1_COMPA_vect) {		// przerwanie TIMER1
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
    PORTA ^= 0x01;				// negujê stan LED0
  a4:	8b b3       	in	r24, 0x1b	; 27
  a6:	91 e0       	ldi	r25, 0x01	; 1
  a8:	89 27       	eor	r24, r25
  aa:	8b bb       	out	0x1b, r24	; 27
    if(OCR1A == czas_trwania_przebiegu_2)		// zmieniam czas trwania przebiegu w zale¿noœci od stanu
  ac:	2a b5       	in	r18, 0x2a	; 42
  ae:	3b b5       	in	r19, 0x2b	; 43
  b0:	80 91 62 00 	lds	r24, 0x0062
  b4:	90 91 63 00 	lds	r25, 0x0063
  b8:	28 17       	cp	r18, r24
  ba:	39 07       	cpc	r19, r25
  bc:	19 f4       	brne	.+6      	; 0xc4 <__vector_7+0x32>
    {
        OCR1A = czas_trwania_przebiegu_1;
  be:	80 e1       	ldi	r24, 0x10	; 16
  c0:	97 e2       	ldi	r25, 0x27	; 39
  c2:	04 c0       	rjmp	.+8      	; 0xcc <__vector_7+0x3a>
    }
    else
    {
        OCR1A = czas_trwania_przebiegu_2;
  c4:	80 91 62 00 	lds	r24, 0x0062
  c8:	90 91 63 00 	lds	r25, 0x0063
  cc:	9b bd       	out	0x2b, r25	; 43
  ce:	8a bd       	out	0x2a, r24	; 42
    }
}
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	3f 91       	pop	r19
  d6:	2f 91       	pop	r18
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <__vector_1>:

ISR (INT0_vect) 				// przerwanie INT0 
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	2f 93       	push	r18
  ee:	3f 93       	push	r19
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
	PORTA |= 0x80;				// zapalam LED7
  f4:	df 9a       	sbi	0x1b, 7	; 27

    if(czas_trwania_przebiegu_2 != 12000)			// je¿eli czas stanu 0 jest wiêkszy ni¿ minimalny
  f6:	80 91 62 00 	lds	r24, 0x0062
  fa:	90 91 63 00 	lds	r25, 0x0063
  fe:	80 5e       	subi	r24, 0xE0	; 224
 100:	9e 42       	sbci	r25, 0x2E	; 46
 102:	09 f4       	brne	.+2      	; 0x106 <__vector_1+0x24>
 104:	61 c0       	rjmp	.+194    	; 0x1c8 <__vector_1+0xe6>
    {
        if(czas_trwania_przebiegu_2 - 5000 > 12000) // je¿eli mo¿na jeszcze skróciæ czas 
 106:	80 91 62 00 	lds	r24, 0x0062
 10a:	90 91 63 00 	lds	r25, 0x0063
 10e:	89 56       	subi	r24, 0x69	; 105
 110:	92 44       	sbci	r25, 0x42	; 66
 112:	94 f1       	brlt	.+100    	; 0x178 <__vector_1+0x96>
        {
			if(OCR1A == czas_trwania_przebiegu_2)	// je¿eli aktualnie jesteœmy w stanie 0
 114:	2a b5       	in	r18, 0x2a	; 42
 116:	3b b5       	in	r19, 0x2b	; 43
 118:	80 91 62 00 	lds	r24, 0x0062
 11c:	90 91 63 00 	lds	r25, 0x0063
 120:	28 17       	cp	r18, r24
 122:	39 07       	cpc	r19, r25
 124:	e9 f4       	brne	.+58     	; 0x160 <__vector_1+0x7e>
			{
	            czas_trwania_przebiegu_2 -= 5000;		// skracamy czas
 126:	80 91 62 00 	lds	r24, 0x0062
 12a:	90 91 63 00 	lds	r25, 0x0063
 12e:	88 58       	subi	r24, 0x88	; 136
 130:	93 41       	sbci	r25, 0x13	; 19
 132:	90 93 63 00 	sts	0x0063, r25
 136:	80 93 62 00 	sts	0x0062, r24
				OCR1A = czas_trwania_przebiegu_2;		// aktualizujemy licznik
 13a:	80 91 62 00 	lds	r24, 0x0062
 13e:	90 91 63 00 	lds	r25, 0x0063
 142:	9b bd       	out	0x2b, r25	; 43
 144:	8a bd       	out	0x2a, r24	; 42
				if(OCR1A >= TCNT1)						// sprawdzamy czy TCNT1 nie przekroczy³o licznika i ewentualnie poprawiamy jego wartoœæ
 146:	2a b5       	in	r18, 0x2a	; 42
 148:	3b b5       	in	r19, 0x2b	; 43
 14a:	8c b5       	in	r24, 0x2c	; 44
 14c:	9d b5       	in	r25, 0x2d	; 45
 14e:	28 17       	cp	r18, r24
 150:	39 07       	cpc	r19, r25
 152:	80 f0       	brcs	.+32     	; 0x174 <__vector_1+0x92>
				{
					TCNT1 = OCR1A - 1;
 154:	8a b5       	in	r24, 0x2a	; 42
 156:	9b b5       	in	r25, 0x2b	; 43
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	9d bd       	out	0x2d, r25	; 45
 15c:	8c bd       	out	0x2c, r24	; 44
 15e:	0a c0       	rjmp	.+20     	; 0x174 <__vector_1+0x92>
				}
			}
			else										// je¿eli jesteœmy w stanie 1 to po prostu skracamy czas
			{
				czas_trwania_przebiegu_2 -= 5000;
 160:	80 91 62 00 	lds	r24, 0x0062
 164:	90 91 63 00 	lds	r25, 0x0063
 168:	88 58       	subi	r24, 0x88	; 136
 16a:	93 41       	sbci	r25, 0x13	; 19
 16c:	90 93 63 00 	sts	0x0063, r25
 170:	80 93 62 00 	sts	0x0062, r24
			}

			PORTA &= 0x7F;									// nie osi¹gnêliœmy minimalnej wartoœci, wy³¹czamy LED7
 174:	df 98       	cbi	0x1b, 7	; 27
 176:	28 c0       	rjmp	.+80     	; 0x1c8 <__vector_1+0xe6>
        }
        else											// je¿eli nie da siê dalej skróciæ
        {
			if(OCR1A == czas_trwania_przebiegu_2)	// je¿eli aktualnie jesteœmy w stanie 0
 178:	2a b5       	in	r18, 0x2a	; 42
 17a:	3b b5       	in	r19, 0x2b	; 43
 17c:	80 91 62 00 	lds	r24, 0x0062
 180:	90 91 63 00 	lds	r25, 0x0063
 184:	28 17       	cp	r18, r24
 186:	39 07       	cpc	r19, r25
 188:	c9 f4       	brne	.+50     	; 0x1bc <__vector_1+0xda>
			{
	            czas_trwania_przebiegu_2 = 12000;		// skracamy czas
 18a:	80 ee       	ldi	r24, 0xE0	; 224
 18c:	9e e2       	ldi	r25, 0x2E	; 46
 18e:	90 93 63 00 	sts	0x0063, r25
 192:	80 93 62 00 	sts	0x0062, r24
				OCR1A = czas_trwania_przebiegu_2;		// aktualizujemy licznik
 196:	80 91 62 00 	lds	r24, 0x0062
 19a:	90 91 63 00 	lds	r25, 0x0063
 19e:	9b bd       	out	0x2b, r25	; 43
 1a0:	8a bd       	out	0x2a, r24	; 42
				if(OCR1A >= TCNT1)						// sprawdzamy czy TCNT1 nie przekroczy³o licznika i ewentualnie poprawiamy jego wartoœæ
 1a2:	2a b5       	in	r18, 0x2a	; 42
 1a4:	3b b5       	in	r19, 0x2b	; 43
 1a6:	8c b5       	in	r24, 0x2c	; 44
 1a8:	9d b5       	in	r25, 0x2d	; 45
 1aa:	28 17       	cp	r18, r24
 1ac:	39 07       	cpc	r19, r25
 1ae:	60 f0       	brcs	.+24     	; 0x1c8 <__vector_1+0xe6>
				{
					TCNT1 = OCR1A - 1;
 1b0:	8a b5       	in	r24, 0x2a	; 42
 1b2:	9b b5       	in	r25, 0x2b	; 43
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	9d bd       	out	0x2d, r25	; 45
 1b8:	8c bd       	out	0x2c, r24	; 44
 1ba:	06 c0       	rjmp	.+12     	; 0x1c8 <__vector_1+0xe6>
				}
			}
			else										// je¿eli jesteœmy w stanie 1 to po prostu skracamy czas
			{
				czas_trwania_przebiegu_2 = 12000;
 1bc:	80 ee       	ldi	r24, 0xE0	; 224
 1be:	9e e2       	ldi	r25, 0x2E	; 46
 1c0:	90 93 63 00 	sts	0x0063, r25
 1c4:	80 93 62 00 	sts	0x0062, r24
			}
        }
    }
}
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	3f 91       	pop	r19
 1ce:	2f 91       	pop	r18
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <main>:

int main(void)
{
	DDRC = 0xff;				// Ustawiam liniê C jako wyjœcie
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	84 bb       	out	0x14, r24	; 20
    DDRA |= 0x81;				// Ustawiam pierwszy bit na linii A jako 
 1de:	8a b3       	in	r24, 0x1a	; 26
 1e0:	81 68       	ori	r24, 0x81	; 129
 1e2:	8a bb       	out	0x1a, r24	; 26
    PORTD |= 0x04;				// Podci¹gam przycisk pod liniê zasilania
 1e4:	92 9a       	sbi	0x12, 2	; 18

	MCUCR |= 0x02; 				// ustawienie aktywacji przerwania INT0 w tryb falling-edge
 1e6:	85 b7       	in	r24, 0x35	; 53
 1e8:	82 60       	ori	r24, 0x02	; 2
 1ea:	85 bf       	out	0x35, r24	; 53
    GICR |= 0x40; 				// w³¹czenie przerwania INT0
 1ec:	8b b7       	in	r24, 0x3b	; 59
 1ee:	80 64       	ori	r24, 0x40	; 64
 1f0:	8b bf       	out	0x3b, r24	; 59

	TIMSK |= 0x10; 				// w³¹czenie przerwania TIMER1
 1f2:	89 b7       	in	r24, 0x39	; 57
 1f4:	80 61       	ori	r24, 0x10	; 16
 1f6:	89 bf       	out	0x39, r24	; 57
	TCCR1B |=  0x08;			// w³¹czenie timera w trybie ctc
 1f8:	8e b5       	in	r24, 0x2e	; 46
 1fa:	88 60       	ori	r24, 0x08	; 8
 1fc:	8e bd       	out	0x2e, r24	; 46

	czas_trwania_przebiegu_2 = 20000;        // 0.32s
 1fe:	80 e2       	ldi	r24, 0x20	; 32
 200:	9e e4       	ldi	r25, 0x4E	; 78
 202:	90 93 63 00 	sts	0x0063, r25
 206:	80 93 62 00 	sts	0x0062, r24

    OCR1A = czas_trwania_przebiegu_2;
 20a:	80 91 62 00 	lds	r24, 0x0062
 20e:	90 91 63 00 	lds	r25, 0x0063
 212:	9b bd       	out	0x2b, r25	; 43
 214:	8a bd       	out	0x2a, r24	; 42

	TCCR1B |= 0x03;				// ustawiam prescaler na 1/64
 216:	8e b5       	in	r24, 0x2e	; 46
 218:	83 60       	ori	r24, 0x03	; 3
 21a:	8e bd       	out	0x2e, r24	; 46

	sei();						// w³¹czam obs³ugê przerwañ
 21c:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 21e:	2a e6       	ldi	r18, 0x6A	; 106
 220:	38 e1       	ldi	r19, 0x18	; 24
	
    while (1) 
    {	
		PORTC ^= 0xff;			// negujê stan portu C w celu zmiany jego stanu
 222:	85 b3       	in	r24, 0x15	; 21
 224:	80 95       	com	r24
 226:	85 bb       	out	0x15, r24	; 21
 228:	c9 01       	movw	r24, r18
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <main+0x50>
 22e:	f9 cf       	rjmp	.-14     	; 0x222 <main+0x48>

00000230 <_exit>:
 230:	f8 94       	cli

00000232 <__stop_program>:
 232:	ff cf       	rjmp	.-2      	; 0x232 <__stop_program>
