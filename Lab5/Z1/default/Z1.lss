
Z1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000039  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000125  00000000  00000000  00000197  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000b0  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000018b  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000004f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ee  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000048  00000000  00000000  00000626  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_7>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_7>:
#define F_CPU 4000000
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

ISR (TIMER1_COMPA_vect) {		// przerwanie TIMER1
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
    PORTA &= 0xFE;				// wy³¹czam LED0
  78:	d8 98       	cbi	0x1b, 0	; 27
    
    TCCR1B &= 0xF8; 			// wy³¹czam TIMER1
  7a:	8e b5       	in	r24, 0x2e	; 46
  7c:	88 7f       	andi	r24, 0xF8	; 248
  7e:	8e bd       	out	0x2e, r24	; 46
}
  80:	8f 91       	pop	r24
  82:	0f 90       	pop	r0
  84:	0f be       	out	0x3f, r0	; 63
  86:	0f 90       	pop	r0
  88:	1f 90       	pop	r1
  8a:	18 95       	reti

0000008c <__vector_1>:

ISR (INT0_vect) 				// przerwanie INT0 
{
  8c:	1f 92       	push	r1
  8e:	0f 92       	push	r0
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	0f 92       	push	r0
  94:	11 24       	eor	r1, r1
  96:	8f 93       	push	r24
	TCNT1 =0 ;					// resetujê licznik
  98:	1d bc       	out	0x2d, r1	; 45
  9a:	1c bc       	out	0x2c, r1	; 44
    TCCR1B |= 0x03 ; 			// w³¹czam TIMER1 ustawiaj¹c prescaler w tryb 1/64
  9c:	8e b5       	in	r24, 0x2e	; 46
  9e:	83 60       	ori	r24, 0x03	; 3
  a0:	8e bd       	out	0x2e, r24	; 46
    
    PORTA |= 0x01;				// w³¹czam LED0
  a2:	d8 9a       	sbi	0x1b, 0	; 27
}
  a4:	8f 91       	pop	r24
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <main>:

int main(void)
{
	DDRC = 0xff;				// Ustawiam liniê C jako wyjœcie
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	84 bb       	out	0x14, r24	; 20
    DDRA |= 0x01;				// Ustawiam pierwszy bit na linii A jako 
  b4:	d0 9a       	sbi	0x1a, 0	; 26
    PORTD |= 0x04;				// Podci¹gam przycisk pod liniê zasilania
  b6:	92 9a       	sbi	0x12, 2	; 18

	MCUCR |= 0x02; 				// ustawienie aktywacji przerwania INT0 w tryb falling-edge
  b8:	85 b7       	in	r24, 0x35	; 53
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	85 bf       	out	0x35, r24	; 53
    GICR |= 0x40; 				// w³¹czenie przerwania INT0
  be:	8b b7       	in	r24, 0x3b	; 59
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	8b bf       	out	0x3b, r24	; 59

	OCR1A = 31250;				// ustawienie momentu przerwania na 31250 (0,5s)
  c4:	82 e1       	ldi	r24, 0x12	; 18
  c6:	9a e7       	ldi	r25, 0x7A	; 122
  c8:	9b bd       	out	0x2b, r25	; 43
  ca:	8a bd       	out	0x2a, r24	; 42

	TIMSK |= 0x10; 				// w³¹czenie przerwania TIMER1
  cc:	89 b7       	in	r24, 0x39	; 57
  ce:	80 61       	ori	r24, 0x10	; 16
  d0:	89 bf       	out	0x39, r24	; 57

	sei();						// w³¹czam obs³ugê przerwañ
  d2:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d4:	20 e5       	ldi	r18, 0x50	; 80
  d6:	33 ec       	ldi	r19, 0xC3	; 195
	
    while (1) 
    {	
		PORTC ^= 0xff;			// negujê stan portu C w celu zmiany jego stanu
  d8:	85 b3       	in	r24, 0x15	; 21
  da:	80 95       	com	r24
  dc:	85 bb       	out	0x15, r24	; 21
  de:	c9 01       	movw	r24, r18
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x30>
  e4:	f9 cf       	rjmp	.-14     	; 0xd8 <main+0x28>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
