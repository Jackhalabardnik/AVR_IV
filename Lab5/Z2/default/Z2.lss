
Z2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000076  00000000  00000000  0000013b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000041  00000000  00000000  000001b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000a1  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000095  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 54 00 	jmp	0xa8	; 0xa8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>

int main(void)
{
	DDRD |= 0x20;				// Ustawiam 5 pin na linii D jako wyjœcie
  6c:	8d 9a       	sbi	0x11, 5	; 17

	TCCR1A |= 0x82;				// Ustawiam TIMER 1 w tryb Fast PWM i w³¹czam tryb nieodwracaj¹cy
  6e:	8f b5       	in	r24, 0x2f	; 47
  70:	82 68       	ori	r24, 0x82	; 130
  72:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 0x18;				// Ustawiam TIMER 1 w tryb Fast PWM i 
  74:	8e b5       	in	r24, 0x2e	; 46
  76:	88 61       	ori	r24, 0x18	; 24
  78:	8e bd       	out	0x2e, r24	; 46

	ICR1 = 35625; 				// Ustawiam szczyt PWM na 0,57s
  7a:	89 e2       	ldi	r24, 0x29	; 41
  7c:	9b e8       	ldi	r25, 0x8B	; 139
  7e:	97 bd       	out	0x27, r25	; 39
  80:	86 bd       	out	0x26, r24	; 38
	OCR1A = 11875;				// Ustawiam moment porównania na 0,19s
  82:	83 e6       	ldi	r24, 0x63	; 99
  84:	9e e2       	ldi	r25, 0x2E	; 46
  86:	9b bd       	out	0x2b, r25	; 43
  88:	8a bd       	out	0x2a, r24	; 42

	ICR1 = 5; 				// Ustawiam szczyt PWM na 0,57s
  8a:	85 e0       	ldi	r24, 0x05	; 5
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	97 bd       	out	0x27, r25	; 39
  90:	86 bd       	out	0x26, r24	; 38
	OCR1A = 2;				// Ustawiam moment porównania na 0,19s
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	9b bd       	out	0x2b, r25	; 43
  98:	8a bd       	out	0x2a, r24	; 42

	TCNT1 = 0;
  9a:	1d bc       	out	0x2d, r1	; 45
  9c:	1c bc       	out	0x2c, r1	; 44

	TCCR1B |= 0x03;				// ustawiam prescaler na 1/64
  9e:	8e b5       	in	r24, 0x2e	; 46
  a0:	83 60       	ori	r24, 0x03	; 3
  a2:	8e bd       	out	0x2e, r24	; 46


    while (1) 
    {	
		asm("nop");	
  a4:	00 00       	nop
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <main+0x38>

000000a8 <_exit>:
  a8:	f8 94       	cli

000000aa <__stop_program>:
  aa:	ff cf       	rjmp	.-2      	; 0xaa <__stop_program>
