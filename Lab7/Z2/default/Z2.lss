
Z2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002b  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000015b  00000000  00000000  00000191  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d7  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001a2  00000000  00000000  000003c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000104  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000026  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000006c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_10>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5d 00 	call	0xba	; 0xba <main>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_10>:
#define F_CPU 4000000
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

ISR (TIMER0_COMP_vect) {        				// Przerwanie TIMER0
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	8f 93       	push	r24
  7c:	9f 93       	push	r25
	
	if((PIND & 0x0F) != 0x0F)						// Wykrywam ¿e na jedenym z wierszy jest logiczne 0
  7e:	80 b3       	in	r24, 0x10	; 16
  80:	8f 70       	andi	r24, 0x0F	; 15
  82:	8f 30       	cpi	r24, 0x0F	; 15
  84:	89 f0       	breq	.+34     	; 0xa8 <__vector_10+0x3c>
	{
		char row = PIND & 0x0F;					// Zapamiêtujê która to kolumna
  86:	90 b3       	in	r25, 0x10	; 16
		char backup_DDRD = DDRD;
  88:	21 b3       	in	r18, 0x11	; 17
		char backup_PORTD = PORTD;
  8a:	32 b3       	in	r19, 0x12	; 18

		DDRD ^= 0xFF;							// Zamieniam linie wierszy
  8c:	81 b3       	in	r24, 0x11	; 17
  8e:	80 95       	com	r24
  90:	81 bb       	out	0x11, r24	; 17
		PORTD ^= 0xFF;							// Zamieniam podci¹gniêcia linii wierszy
  92:	82 b3       	in	r24, 0x12	; 18
  94:	80 95       	com	r24
  96:	82 bb       	out	0x12, r24	; 18

		char column = PIND & 0xF0;				// Odczytujê stan linii kolumn
  98:	80 b3       	in	r24, 0x10	; 16
		PORTA = ~(row | column);					// Ustawiam port A
  9a:	80 7f       	andi	r24, 0xF0	; 240
  9c:	9f 70       	andi	r25, 0x0F	; 15
  9e:	89 2b       	or	r24, r25
  a0:	80 95       	com	r24
  a2:	8b bb       	out	0x1b, r24	; 27
		DDRD = backup_DDRD;							// Przywracam zapisane stany linii
  a4:	21 bb       	out	0x11, r18	; 17
		PORTD = backup_PORTD;
  a6:	32 bb       	out	0x12, r19	; 18
	}
}
  a8:	9f 91       	pop	r25
  aa:	8f 91       	pop	r24
  ac:	3f 91       	pop	r19
  ae:	2f 91       	pop	r18
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <main>:

int main(void)
{
	DDRA = 0xFF;                // Ustawiam ca³¹ liniê A i C jako wyjœcie
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	8a bb       	out	0x1a, r24	; 26
    DDRC = 0xFF;
  be:	84 bb       	out	0x14, r24	; 20
    DDRD = 0xF0;                // Ustawiam starsze bity linii D jako wyjœcie
  c0:	80 ef       	ldi	r24, 0xF0	; 240
  c2:	81 bb       	out	0x11, r24	; 17

    PORTD |= 0x0F;                // podci¹gam m³odsze bity PORTD pod zasilanie
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	8f 60       	ori	r24, 0x0F	; 15
  c8:	82 bb       	out	0x12, r24	; 18

    OCR0 = 195;                    // ustawienie momentu przerwania na 195 (0,05s)
  ca:	83 ec       	ldi	r24, 0xC3	; 195
  cc:	8c bf       	out	0x3c, r24	; 60

    TIMSK |= 0x02;                 // w³¹czenie przerwania TIMER0
  ce:	89 b7       	in	r24, 0x39	; 57
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	89 bf       	out	0x39, r24	; 57

    TCCR0 |= 0b01000101;            // w³¹czam tryb CTC i ustawiam prescaler na 1/1024
  d4:	83 b7       	in	r24, 0x33	; 51
  d6:	85 64       	ori	r24, 0x45	; 69
  d8:	83 bf       	out	0x33, r24	; 51

    sei();                        // w³¹czam obs³ugê przerwañ
  da:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  dc:	20 e5       	ldi	r18, 0x50	; 80
  de:	33 ec       	ldi	r19, 0xC3	; 195
	
	
    while (1) 
    {    
        PORTC ^= 0xFF;            // animacja
  e0:	85 b3       	in	r24, 0x15	; 21
  e2:	80 95       	com	r24
  e4:	85 bb       	out	0x15, r24	; 21
  e6:	c9 01       	movw	r24, r18
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x2e>
  ec:	f9 cf       	rjmp	.-14     	; 0xe0 <main+0x26>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
