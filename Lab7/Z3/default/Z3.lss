
Z3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000196  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000020a  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000044  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000184  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000115  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001bc  00000000  00000000  00000507  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000006c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f5  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000070  00000000  00000000  000007f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000869  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 4c 00 	jmp	0x98	; 0x98 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  74:	0c 94 c9 00 	jmp	0x192	; 0x192 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <debinary>:
#include <avr/interrupt.h>

volatile int counter = 0;					// licznik multipleksacji

int debinary(int x)							// wyodrêbniam numer bitu na podstawie wartoœci dziesiêtnej
{
  7c:	9c 01       	movw	r18, r24
	if(x == 8) {
  7e:	88 30       	cpi	r24, 0x08	; 8
  80:	91 05       	cpc	r25, r1
  82:	19 f4       	brne	.+6      	; 0x8a <debinary+0xe>
  84:	24 e0       	ldi	r18, 0x04	; 4
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	05 c0       	rjmp	.+10     	; 0x94 <debinary+0x18>
		return 4;
	}
	if(x == 4) {
  8a:	84 30       	cpi	r24, 0x04	; 4
  8c:	91 05       	cpc	r25, r1
  8e:	11 f4       	brne	.+4      	; 0x94 <debinary+0x18>
  90:	23 e0       	ldi	r18, 0x03	; 3
  92:	30 e0       	ldi	r19, 0x00	; 0
		return 3;
	}
	return x;
}
  94:	c9 01       	movw	r24, r18
  96:	08 95       	ret

00000098 <__vector_10>:

ISR (TIMER0_COMP_vect) {        						// Przerwanie TIMER0
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	2f 93       	push	r18
  a4:	3f 93       	push	r19
  a6:	4f 93       	push	r20
  a8:	5f 93       	push	r21
  aa:	8f 93       	push	r24
  ac:	9f 93       	push	r25
	PORTD = (~_BV(counter+4) & 0xF0) | (PORTD & 0x0F);	// Ustawiam 0 na dany bit w PORTD a resztê starszych bitów na 1
  ae:	20 91 60 00 	lds	r18, 0x0060
  b2:	30 91 61 00 	lds	r19, 0x0061
  b6:	42 b3       	in	r20, 0x12	; 18
  b8:	2c 5f       	subi	r18, 0xFC	; 252
  ba:	3f 4f       	sbci	r19, 0xFF	; 255
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <__vector_10+0x2e>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	2a 95       	dec	r18
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <__vector_10+0x2a>
  ca:	80 95       	com	r24
  cc:	80 7f       	andi	r24, 0xF0	; 240
  ce:	4f 70       	andi	r20, 0x0F	; 15
  d0:	84 2b       	or	r24, r20
  d2:	82 bb       	out	0x12, r24	; 18
	if((PIND & 0x0F) != 0x0F)							// Sprawdzam czy dany klawisz jest naciœniêty
  d4:	80 b3       	in	r24, 0x10	; 16
  d6:	8f 70       	andi	r24, 0x0F	; 15
  d8:	8f 30       	cpi	r24, 0x0F	; 15
  da:	11 f1       	breq	.+68     	; 0x120 <__vector_10+0x88>
	{
		PORTA = (((debinary(~PIND & 0x0F)-1) * 4) + counter) | (PORTA & 0xF0);		// wypisujê zdekodowany znak klawisza
  dc:	80 b3       	in	r24, 0x10	; 16
  de:	48 2f       	mov	r20, r24
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	40 95       	com	r20
  e4:	50 95       	com	r21
  e6:	4f 70       	andi	r20, 0x0F	; 15
  e8:	50 70       	andi	r21, 0x00	; 0

volatile int counter = 0;					// licznik multipleksacji

int debinary(int x)							// wyodrêbniam numer bitu na podstawie wartoœci dziesiêtnej
{
	if(x == 8) {
  ea:	48 30       	cpi	r20, 0x08	; 8
  ec:	51 05       	cpc	r21, r1
  ee:	19 f4       	brne	.+6      	; 0xf6 <__vector_10+0x5e>
  f0:	44 e0       	ldi	r20, 0x04	; 4
  f2:	50 e0       	ldi	r21, 0x00	; 0
  f4:	05 c0       	rjmp	.+10     	; 0x100 <__vector_10+0x68>
		return 4;
	}
	if(x == 4) {
  f6:	44 30       	cpi	r20, 0x04	; 4
  f8:	51 05       	cpc	r21, r1
  fa:	11 f4       	brne	.+4      	; 0x100 <__vector_10+0x68>
  fc:	43 e0       	ldi	r20, 0x03	; 3
  fe:	50 e0       	ldi	r21, 0x00	; 0

ISR (TIMER0_COMP_vect) {        						// Przerwanie TIMER0
	PORTD = (~_BV(counter+4) & 0xF0) | (PORTD & 0x0F);	// Ustawiam 0 na dany bit w PORTD a resztê starszych bitów na 1
	if((PIND & 0x0F) != 0x0F)							// Sprawdzam czy dany klawisz jest naciœniêty
	{
		PORTA = (((debinary(~PIND & 0x0F)-1) * 4) + counter) | (PORTA & 0xF0);		// wypisujê zdekodowany znak klawisza
 100:	20 91 60 00 	lds	r18, 0x0060
 104:	30 91 61 00 	lds	r19, 0x0061
 108:	9b b3       	in	r25, 0x1b	; 27
 10a:	41 50       	subi	r20, 0x01	; 1
 10c:	50 40       	sbci	r21, 0x00	; 0
 10e:	44 0f       	add	r20, r20
 110:	55 1f       	adc	r21, r21
 112:	44 0f       	add	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	84 2f       	mov	r24, r20
 118:	82 0f       	add	r24, r18
 11a:	90 7f       	andi	r25, 0xF0	; 240
 11c:	89 2b       	or	r24, r25
 11e:	8b bb       	out	0x1b, r24	; 27
	}
	counter++;										// zwiêkszam licznik multipleksacji i w razie czego wracam do 0
 120:	80 91 60 00 	lds	r24, 0x0060
 124:	90 91 61 00 	lds	r25, 0x0061
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	90 93 61 00 	sts	0x0061, r25
 12e:	80 93 60 00 	sts	0x0060, r24
	if(counter >= 4) 
 132:	80 91 60 00 	lds	r24, 0x0060
 136:	90 91 61 00 	lds	r25, 0x0061
 13a:	04 97       	sbiw	r24, 0x04	; 4
 13c:	24 f0       	brlt	.+8      	; 0x146 <__vector_10+0xae>
	{
		counter = 0;
 13e:	10 92 61 00 	sts	0x0061, r1
 142:	10 92 60 00 	sts	0x0060, r1
	}
	
}
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	5f 91       	pop	r21
 14c:	4f 91       	pop	r20
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <main>:

int main(void)
{
	DDRA = 0x0F;                // Ustawiam ca³¹ liniê A i C jako wyjœcie
 15c:	8f e0       	ldi	r24, 0x0F	; 15
 15e:	8a bb       	out	0x1a, r24	; 26
    DDRC = 0xFF;
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	84 bb       	out	0x14, r24	; 20
    DDRD = 0xF0;                // Ustawiam starsze bity linii D jako wyjœcie
 164:	80 ef       	ldi	r24, 0xF0	; 240
 166:	81 bb       	out	0x11, r24	; 17

    PORTD |= 0x0F;                // podci¹gam m³odsze bity PORTD pod zasilanie
 168:	82 b3       	in	r24, 0x12	; 18
 16a:	8f 60       	ori	r24, 0x0F	; 15
 16c:	82 bb       	out	0x12, r24	; 18

    OCR0 = 195;                    // ustawienie momentu przerwania na 195 (0,05s)
 16e:	83 ec       	ldi	r24, 0xC3	; 195
 170:	8c bf       	out	0x3c, r24	; 60

    TIMSK |= 0x02;                 // w³¹czenie przerwania TIMER0
 172:	89 b7       	in	r24, 0x39	; 57
 174:	82 60       	ori	r24, 0x02	; 2
 176:	89 bf       	out	0x39, r24	; 57

    TCCR0 |= 0b01000101;            // w³¹czam tryb CTC i ustawiam prescaler na 1/1024
 178:	83 b7       	in	r24, 0x33	; 51
 17a:	85 64       	ori	r24, 0x45	; 69
 17c:	83 bf       	out	0x33, r24	; 51

    sei();                        // w³¹czam obs³ugê przerwañ
 17e:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 180:	20 e5       	ldi	r18, 0x50	; 80
 182:	33 ec       	ldi	r19, 0xC3	; 195
	
	
    while (1) 
    {    
        PORTC ^= 0xFF;            // animacja
 184:	85 b3       	in	r24, 0x15	; 21
 186:	80 95       	com	r24
 188:	85 bb       	out	0x15, r24	; 21
 18a:	c9 01       	movw	r24, r18
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <main+0x30>
 190:	f9 cf       	rjmp	.-14     	; 0x184 <main+0x28>

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
