
Z1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000039  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000210  00000000  00000000  0000028d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000eb  00000000  00000000  0000049d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000242  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000007cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000113  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000052  00000000  00000000  0000091f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000d8  00000000  00000000  00000971  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
  64:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

ISR (INT0_vect) 								// Przerwanie INT0 
{	
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	5f 93       	push	r21
  7e:	6f 93       	push	r22
  80:	7f 93       	push	r23
  82:	8f 93       	push	r24
  84:	9f 93       	push	r25
  86:	ef 93       	push	r30
	cli();															// Upewniam siê ¿e nie dojdzie do wykonania przerwania podczas tego przerwania
  88:	f8 94       	cli
	PORTB += 1;
  8a:	88 b3       	in	r24, 0x18	; 24
  8c:	8f 5f       	subi	r24, 0xFF	; 255
  8e:	88 bb       	out	0x18, r24	; 24
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	50 e0       	ldi	r21, 0x00	; 0
	for(int i = 0; i < 4; i++) 
	{
		PORTD = (~_BV(i+4) & 0xF0) | (PORTD & 0x0F);				// Ustawiam 0 na danym bicie i resztê na 1 (pomijam m³odsze bity)
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	70 e0       	ldi	r23, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  98:	ed e0       	ldi	r30, 0x0D	; 13
  9a:	22 b3       	in	r18, 0x12	; 18
  9c:	4d 5f       	subi	r20, 0xFD	; 253
  9e:	5f 4f       	sbci	r21, 0xFF	; 255
  a0:	cb 01       	movw	r24, r22
  a2:	04 2e       	mov	r0, r20
  a4:	02 c0       	rjmp	.+4      	; 0xaa <__vector_1+0x3e>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	0a 94       	dec	r0
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <__vector_1+0x3a>
  ae:	43 50       	subi	r20, 0x03	; 3
  b0:	50 40       	sbci	r21, 0x00	; 0
  b2:	80 95       	com	r24
  b4:	80 7f       	andi	r24, 0xF0	; 240
  b6:	2f 70       	andi	r18, 0x0F	; 15
  b8:	82 2b       	or	r24, r18
  ba:	82 bb       	out	0x12, r24	; 18
  bc:	8e 2f       	mov	r24, r30
  be:	8a 95       	dec	r24
  c0:	f1 f7       	brne	.-4      	; 0xbe <__vector_1+0x52>
		_delay_us(10);
		if(!(PIND & 0x04))							// Sprawdzam czy dany klawisz jest naciœniêty
  c2:	82 99       	sbic	0x10, 2	; 16
  c4:	0a c0       	rjmp	.+20     	; 0xda <__vector_1+0x6e>
		{
			PORTA = (PORTA & 0x0F) | (((i + 1) << 4) & 0xF0);
  c6:	8b b3       	in	r24, 0x1b	; 27
  c8:	9a 01       	movw	r18, r20
  ca:	94 e0       	ldi	r25, 0x04	; 4
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	9a 95       	dec	r25
  d2:	e1 f7       	brne	.-8      	; 0xcc <__vector_1+0x60>
  d4:	8f 70       	andi	r24, 0x0F	; 15
  d6:	82 2b       	or	r24, r18
  d8:	8b bb       	out	0x1b, r24	; 27
  da:	4f 5f       	subi	r20, 0xFF	; 255
  dc:	5f 4f       	sbci	r21, 0xFF	; 255

ISR (INT0_vect) 								// Przerwanie INT0 
{	
	cli();															// Upewniam siê ¿e nie dojdzie do wykonania przerwania podczas tego przerwania
	PORTB += 1;
	for(int i = 0; i < 4; i++) 
  de:	45 30       	cpi	r20, 0x05	; 5
  e0:	51 05       	cpc	r21, r1
  e2:	d9 f6       	brne	.-74     	; 0x9a <__vector_1+0x2e>
		{
			PORTA = (PORTA & 0x0F) | (((i + 1) << 4) & 0xF0);
		}
	}

	PORTD &= 0x0F;
  e4:	82 b3       	in	r24, 0x12	; 18
  e6:	8f 70       	andi	r24, 0x0F	; 15
  e8:	82 bb       	out	0x12, r24	; 18

	GIFR |= 0b01000000;				// upewniam siê ¿e nie dojdzie do paso¿ytniczych przerwañ
  ea:	8a b7       	in	r24, 0x3a	; 58
  ec:	80 64       	ori	r24, 0x40	; 64
  ee:	8a bf       	out	0x3a, r24	; 58

	sei();															// W³¹czam obs³ugê przerwañ
  f0:	78 94       	sei
}
  f2:	ef 91       	pop	r30
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	7f 91       	pop	r23
  fa:	6f 91       	pop	r22
  fc:	5f 91       	pop	r21
  fe:	4f 91       	pop	r20
 100:	3f 91       	pop	r19
 102:	2f 91       	pop	r18
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <__vector_2>:

ISR (INT1_vect) 				// Przerwanie INT1 
{
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	4f 93       	push	r20
 11e:	5f 93       	push	r21
 120:	6f 93       	push	r22
 122:	7f 93       	push	r23
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
	cli();									// Upewniam siê ¿e nie dojdzie do wykonania przerwania podczas tego przerwania
 128:	f8 94       	cli
	PORTC += 1;
 12a:	85 b3       	in	r24, 0x15	; 21
 12c:	8f 5f       	subi	r24, 0xFF	; 255
 12e:	85 bb       	out	0x15, r24	; 21
 130:	44 e0       	ldi	r20, 0x04	; 4
 132:	50 e0       	ldi	r21, 0x00	; 0
	for(int i = 0; i < 4; i++) 
	{
		PORTD = (~_BV(i+4) & 0xF0) | (PORTD & 0x0F);				// Ustawiam 0 na danym bicie i resztê na 1 (pomijam m³odsze bity)
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	3d e0       	ldi	r19, 0x0D	; 13
 13a:	22 b3       	in	r18, 0x12	; 18
 13c:	cb 01       	movw	r24, r22
 13e:	04 2e       	mov	r0, r20
 140:	02 c0       	rjmp	.+4      	; 0x146 <__vector_2+0x38>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	0a 94       	dec	r0
 148:	e2 f7       	brpl	.-8      	; 0x142 <__vector_2+0x34>
 14a:	80 95       	com	r24
 14c:	80 7f       	andi	r24, 0xF0	; 240
 14e:	2f 70       	andi	r18, 0x0F	; 15
 150:	82 2b       	or	r24, r18
 152:	82 bb       	out	0x12, r24	; 18
 154:	83 2f       	mov	r24, r19
 156:	8a 95       	dec	r24
 158:	f1 f7       	brne	.-4      	; 0x156 <__vector_2+0x48>
		_delay_us(10);
		if(!(PIND & 0x08))
 15a:	83 99       	sbic	0x10, 3	; 16
 15c:	0c c0       	rjmp	.+24     	; 0x176 <__vector_2+0x68>
		{
			PORTA = (PORTA & 0x0F) | (((i + 5) << 4) & 0xF0);		// Sprawdzam czy dany klawisz jest naciœniêty
 15e:	2b b3       	in	r18, 0x1b	; 27
 160:	ca 01       	movw	r24, r20
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	82 95       	swap	r24
 166:	92 95       	swap	r25
 168:	90 7f       	andi	r25, 0xF0	; 240
 16a:	98 27       	eor	r25, r24
 16c:	80 7f       	andi	r24, 0xF0	; 240
 16e:	98 27       	eor	r25, r24
 170:	2f 70       	andi	r18, 0x0F	; 15
 172:	28 2b       	or	r18, r24
 174:	2b bb       	out	0x1b, r18	; 27
 176:	4f 5f       	subi	r20, 0xFF	; 255
 178:	5f 4f       	sbci	r21, 0xFF	; 255

ISR (INT1_vect) 				// Przerwanie INT1 
{
	cli();									// Upewniam siê ¿e nie dojdzie do wykonania przerwania podczas tego przerwania
	PORTC += 1;
	for(int i = 0; i < 4; i++) 
 17a:	48 30       	cpi	r20, 0x08	; 8
 17c:	51 05       	cpc	r21, r1
 17e:	e9 f6       	brne	.-70     	; 0x13a <__vector_2+0x2c>
		{
			PORTA = (PORTA & 0x0F) | (((i + 5) << 4) & 0xF0);		// Sprawdzam czy dany klawisz jest naciœniêty
		}
	}

	PORTD &= 0x0F;
 180:	82 b3       	in	r24, 0x12	; 18
 182:	8f 70       	andi	r24, 0x0F	; 15
 184:	82 bb       	out	0x12, r24	; 18

	GIFR |= 0b10000000;				// upewniam siê ¿e nie dojdzie do paso¿ytniczych przerwañ
 186:	8a b7       	in	r24, 0x3a	; 58
 188:	80 68       	ori	r24, 0x80	; 128
 18a:	8a bf       	out	0x3a, r24	; 58

	sei();
 18c:	78 94       	sei
}
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	7f 91       	pop	r23
 194:	6f 91       	pop	r22
 196:	5f 91       	pop	r21
 198:	4f 91       	pop	r20
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <main>:

int main(void)
{
	DDRA = 0xFF;					// Ustawiam PORT A,B i C jako wejœcie
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;					
 1ac:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
 1ae:	84 bb       	out	0x14, r24	; 20

	DDRD = 0xF0;					// Ustawiam 4 starsze bity portu D jako wejœcie
 1b0:	80 ef       	ldi	r24, 0xF0	; 240
 1b2:	81 bb       	out	0x11, r24	; 17

	PORTD |= 0x0C;					// Podci¹gam pod zasilanie 2 i 3 PIND
 1b4:	82 b3       	in	r24, 0x12	; 18
 1b6:	8c 60       	ori	r24, 0x0C	; 12
 1b8:	82 bb       	out	0x12, r24	; 18

	MCUCR |= 0x0A;					// Ustawienie aktywacji obu przerwañ w tryb falling-edge;
 1ba:	85 b7       	in	r24, 0x35	; 53
 1bc:	8a 60       	ori	r24, 0x0A	; 10
 1be:	85 bf       	out	0x35, r24	; 53
	

	GICR |= 0xC0;					// W³¹czenie przerwañ INT0 i INT1
 1c0:	8b b7       	in	r24, 0x3b	; 59
 1c2:	80 6c       	ori	r24, 0xC0	; 192
 1c4:	8b bf       	out	0x3b, r24	; 59

	sei();							// W³¹czam globaln¹ obs³ugê przerwañ
 1c6:	78 94       	sei


        while (1) 
    {	

		PORTA ^=0x0F;				// Wykonujê animacjê
 1c8:	4f e0       	ldi	r20, 0x0F	; 15
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1ca:	20 e5       	ldi	r18, 0x50	; 80
 1cc:	33 ec       	ldi	r19, 0xC3	; 195
 1ce:	8b b3       	in	r24, 0x1b	; 27
 1d0:	84 27       	eor	r24, r20
 1d2:	8b bb       	out	0x1b, r24	; 27
 1d4:	c9 01       	movw	r24, r18
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <main+0x2e>
 1da:	f9 cf       	rjmp	.-14     	; 0x1ce <main+0x26>

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
