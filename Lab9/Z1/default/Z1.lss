
Z1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000318  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000318  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800062  00800062  000003ae  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000e9  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004ca  00000000  00000000  000004b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000175  00000000  00000000  00000981  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000344  00000000  00000000  00000af6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00000e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ae  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000171  00000000  00000000  0000107a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_1>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_10>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000054 <transcode>:
  54:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e8 e1       	ldi	r30, 0x18	; 24
  78:	f3 e0       	ldi	r31, 0x03	; 3
  7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>

00000086 <__do_clear_bss>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	a2 e6       	ldi	r26, 0x62	; 98
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a7 36       	cpi	r26, 0x67	; 103
  92:	b1 07       	cpc	r27, r17
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 4c 01 	call	0x298	; 0x298 <main>
  9a:	0c 94 8a 01 	jmp	0x314	; 0x314 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <sendHalfByte>:
const char transcode[] PROGMEM  = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' }; // Umieszczam dane w pamiêci programu


void sendHalfByte(char data)
{		
	PORTA |= 0x02; 								// Wysy³am flagê ENABLE
  a2:	d9 9a       	sbi	0x1b, 1	; 27
	PORTA = (PORTA & 0x0F) | (data & 0xF0);		// Wysy³am pó³ bajta
  a4:	9b b3       	in	r25, 0x1b	; 27
  a6:	80 7f       	andi	r24, 0xF0	; 240
  a8:	9f 70       	andi	r25, 0x0F	; 15
  aa:	89 2b       	or	r24, r25
  ac:	8b bb       	out	0x1b, r24	; 27
	PORTA &= 0xFD;								// Usuwam flagê ENABLE
  ae:	d9 98       	cbi	0x1b, 1	; 27
}
  b0:	08 95       	ret

000000b2 <sendByte>:

void sendByte(char data)
{
  b2:	1f 93       	push	r17
  b4:	18 2f       	mov	r17, r24
	sendHalfByte(data);							// Wysy³am górn¹ po³owê bajtu
  b6:	0e 94 51 00 	call	0xa2	; 0xa2 <sendHalfByte>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	8a 95       	dec	r24
  be:	f1 f7       	brne	.-4      	; 0xbc <sendByte+0xa>
	_delay_us(2);								// OpóŸnienie w celu wykrycia stanu "0" na pinie ENABLE
	sendHalfByte(data << 4);					// Wysy³am doln¹ po³owê bajtu
  c0:	81 2f       	mov	r24, r17
  c2:	82 95       	swap	r24
  c4:	80 7f       	andi	r24, 0xF0	; 240
  c6:	0e 94 51 00 	call	0xa2	; 0xa2 <sendHalfByte>
}
  ca:	1f 91       	pop	r17
  cc:	08 95       	ret

000000ce <sendCommand>:

void sendCommand(char data)
{
	sendByte(data);								// Wysy³am komendê
  ce:	0e 94 59 00 	call	0xb2	; 0xb2 <sendByte>
  d2:	82 e4       	ldi	r24, 0x42	; 66
  d4:	8a 95       	dec	r24
  d6:	f1 f7       	brne	.-4      	; 0xd4 <sendCommand+0x6>
	_delay_us(50);								// Czekam na przetworzenie komendy
}
  d8:	08 95       	ret

000000da <sendChar>:

void sendChar(char data)
{
	sendByte(data);								// Wysy³am znak
  da:	0e 94 59 00 	call	0xb2	; 0xb2 <sendByte>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  de:	8c ed       	ldi	r24, 0xDC	; 220
  e0:	95 e0       	ldi	r25, 0x05	; 5
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <sendChar+0x8>
	_delay_us(1500);							// Czekam na wypisanie znaku
}
  e6:	08 95       	ret

000000e8 <debinary>:

int debinary(int x)							// wyodrêbniam numer bitu na podstawie wartoœci dziesiêtnej
{
  e8:	9c 01       	movw	r18, r24
	if(x == 8) {
  ea:	88 30       	cpi	r24, 0x08	; 8
  ec:	91 05       	cpc	r25, r1
  ee:	19 f4       	brne	.+6      	; 0xf6 <debinary+0xe>
  f0:	24 e0       	ldi	r18, 0x04	; 4
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	05 c0       	rjmp	.+10     	; 0x100 <debinary+0x18>
		return 4;
	}
	if(x == 4) {
  f6:	84 30       	cpi	r24, 0x04	; 4
  f8:	91 05       	cpc	r25, r1
  fa:	11 f4       	brne	.+4      	; 0x100 <debinary+0x18>
  fc:	23 e0       	ldi	r18, 0x03	; 3
  fe:	30 e0       	ldi	r19, 0x00	; 0
		return 3;
	}
	return x;
}
 100:	c9 01       	movw	r24, r18
 102:	08 95       	ret

00000104 <__vector_1>:

ISR (INT0_vect) 								// Przerwanie INT0 
{
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	2f 93       	push	r18
 110:	3f 93       	push	r19
 112:	4f 93       	push	r20
 114:	5f 93       	push	r21
 116:	6f 93       	push	r22
 118:	7f 93       	push	r23
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
	PORTA &= 0xFE;								// Prze³¹czam LCD w tryb wprowadzania komend
 126:	d8 98       	cbi	0x1b, 0	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <__vector_1+0x26>
	_delay_us(2);								// OpóŸnienie w celu wykrycia stanu "0" na pinie RS
	sendCommand(0x01);							// Czyszczê wyœwietlacz
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	write_counter = 0;							// Resetujê licznik wpisywania na ekran
 134:	10 92 65 00 	sts	0x0065, r1
 138:	10 92 64 00 	sts	0x0064, r1
	PORTA |= 0x01;								// Prze³¹czam LCD w tryb wprowadzania danych
 13c:	d8 9a       	sbi	0x1b, 0	; 27
}
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	bf 91       	pop	r27
 144:	af 91       	pop	r26
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	7f 91       	pop	r23
 14c:	6f 91       	pop	r22
 14e:	5f 91       	pop	r21
 150:	4f 91       	pop	r20
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <__vector_10>:

ISR (TIMER0_COMP_vect) {        								// Przerwanie TIMER0
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	1f 93       	push	r17
 16c:	2f 93       	push	r18
 16e:	3f 93       	push	r19
 170:	4f 93       	push	r20
 172:	5f 93       	push	r21
 174:	6f 93       	push	r22
 176:	7f 93       	push	r23
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
 17c:	af 93       	push	r26
 17e:	bf 93       	push	r27
 180:	ef 93       	push	r30
 182:	ff 93       	push	r31
	PORTB = (~_BV(multi_counter+4) & 0xF0) | (PORTB & 0x0F);	// Ustawiam 0 na dany bit w PORTD a resztê starszych bitów na 1
 184:	20 91 62 00 	lds	r18, 0x0062
 188:	30 91 63 00 	lds	r19, 0x0063
 18c:	48 b3       	in	r20, 0x18	; 24
 18e:	2c 5f       	subi	r18, 0xFC	; 252
 190:	3f 4f       	sbci	r19, 0xFF	; 255
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <__vector_10+0x3c>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	2a 95       	dec	r18
 19e:	e2 f7       	brpl	.-8      	; 0x198 <__vector_10+0x38>
 1a0:	80 95       	com	r24
 1a2:	80 7f       	andi	r24, 0xF0	; 240
 1a4:	4f 70       	andi	r20, 0x0F	; 15
 1a6:	84 2b       	or	r24, r20
 1a8:	88 bb       	out	0x18, r24	; 24
	if((PINB & 0x0F) != 0x0F)									// Sprawdzam czy dany klawisz jest naciœniêty
 1aa:	86 b3       	in	r24, 0x16	; 22
 1ac:	8f 70       	andi	r24, 0x0F	; 15
 1ae:	8f 30       	cpi	r24, 0x0F	; 15
 1b0:	09 f4       	brne	.+2      	; 0x1b4 <__vector_10+0x54>
 1b2:	41 c0       	rjmp	.+130    	; 0x236 <__vector_10+0xd6>
	{
		char code = ((debinary(~PINB & 0x0F)-1) * 4) + multi_counter;	// Dekodujê znak z klawiatury
 1b4:	86 b3       	in	r24, 0x16	; 22
 1b6:	e8 2f       	mov	r30, r24
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	e0 95       	com	r30
 1bc:	f0 95       	com	r31
 1be:	ef 70       	andi	r30, 0x0F	; 15
 1c0:	f0 70       	andi	r31, 0x00	; 0
	_delay_us(1500);							// Czekam na wypisanie znaku
}

int debinary(int x)							// wyodrêbniam numer bitu na podstawie wartoœci dziesiêtnej
{
	if(x == 8) {
 1c2:	e8 30       	cpi	r30, 0x08	; 8
 1c4:	f1 05       	cpc	r31, r1
 1c6:	19 f4       	brne	.+6      	; 0x1ce <__vector_10+0x6e>
 1c8:	e4 e0       	ldi	r30, 0x04	; 4
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <__vector_10+0x78>
		return 4;
	}
	if(x == 4) {
 1ce:	e4 30       	cpi	r30, 0x04	; 4
 1d0:	f1 05       	cpc	r31, r1
 1d2:	11 f4       	brne	.+4      	; 0x1d8 <__vector_10+0x78>
 1d4:	e3 e0       	ldi	r30, 0x03	; 3
 1d6:	f0 e0       	ldi	r31, 0x00	; 0

ISR (TIMER0_COMP_vect) {        								// Przerwanie TIMER0
	PORTB = (~_BV(multi_counter+4) & 0xF0) | (PORTB & 0x0F);	// Ustawiam 0 na dany bit w PORTD a resztê starszych bitów na 1
	if((PINB & 0x0F) != 0x0F)									// Sprawdzam czy dany klawisz jest naciœniêty
	{
		char code = ((debinary(~PINB & 0x0F)-1) * 4) + multi_counter;	// Dekodujê znak z klawiatury
 1d8:	80 91 62 00 	lds	r24, 0x0062
 1dc:	90 91 63 00 	lds	r25, 0x0063
 1e0:	31 97       	sbiw	r30, 0x01	; 1
 1e2:	ee 0f       	add	r30, r30
 1e4:	ff 1f       	adc	r31, r31
 1e6:	ee 0f       	add	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	1e 2f       	mov	r17, r30
 1ec:	18 0f       	add	r17, r24
		if(write_counter < 16 && (code != last_character || no_entry))			// Sprawdzam czy mo¿na wpisaæ kolejny znak
 1ee:	80 91 64 00 	lds	r24, 0x0064
 1f2:	90 91 65 00 	lds	r25, 0x0065
 1f6:	40 97       	sbiw	r24, 0x10	; 16
 1f8:	cc f4       	brge	.+50     	; 0x22c <__vector_10+0xcc>
 1fa:	80 91 60 00 	lds	r24, 0x0060
 1fe:	18 17       	cp	r17, r24
 200:	21 f4       	brne	.+8      	; 0x20a <__vector_10+0xaa>
 202:	80 91 61 00 	lds	r24, 0x0061
 206:	88 23       	and	r24, r24
 208:	89 f0       	breq	.+34     	; 0x22c <__vector_10+0xcc>
		{
			sendChar(pgm_read_byte_near(transcode + code));		// wypisujê zdekodowany znak klawisza
 20a:	e1 2f       	mov	r30, r17
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	ec 5a       	subi	r30, 0xAC	; 172
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	e4 91       	lpm	r30, Z+
 214:	8e 2f       	mov	r24, r30
 216:	0e 94 6d 00 	call	0xda	; 0xda <sendChar>
			write_counter++;
 21a:	80 91 64 00 	lds	r24, 0x0064
 21e:	90 91 65 00 	lds	r25, 0x0065
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	90 93 65 00 	sts	0x0065, r25
 228:	80 93 64 00 	sts	0x0064, r24
		}
		last_character = code;									// Zapamiêtujê kod klawisza
 22c:	10 93 60 00 	sts	0x0060, r17
		was_char_pressed = 1;									// Zauwa¿am ¿e wcisn¹³em jakiœ klawisz
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 66 00 	sts	0x0066, r24
	}
	multi_counter++;											// zwiêkszam licznik multipleksacji i w razie czego wracam do 0
 236:	80 91 62 00 	lds	r24, 0x0062
 23a:	90 91 63 00 	lds	r25, 0x0063
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	90 93 63 00 	sts	0x0063, r25
 244:	80 93 62 00 	sts	0x0062, r24
	if(multi_counter >= 4) 
 248:	80 91 62 00 	lds	r24, 0x0062
 24c:	90 91 63 00 	lds	r25, 0x0063
 250:	04 97       	sbiw	r24, 0x04	; 4
 252:	84 f0       	brlt	.+32     	; 0x274 <__vector_10+0x114>
	{
		if(was_char_pressed)									// sprawdzam czy w poprzedniej iteracji zosta³ naciœniêty jakiœ klawisz
 254:	80 91 66 00 	lds	r24, 0x0066
 258:	88 23       	and	r24, r24
 25a:	19 f0       	breq	.+6      	; 0x262 <__vector_10+0x102>
		{
			no_entry = 0;										// ustawiam flagê braku wpisywania na wartoœæ fa³sz
 25c:	10 92 61 00 	sts	0x0061, r1
 260:	03 c0       	rjmp	.+6      	; 0x268 <__vector_10+0x108>
		}
		else
		{
			no_entry = 1;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	80 93 61 00 	sts	0x0061, r24
		}
		was_char_pressed = 0;									// resetujê flagê sprawdzaj¹c¹ czy nacisn¹³em jakiœ klawisz
 268:	10 92 66 00 	sts	0x0066, r1
		multi_counter = 0;
 26c:	10 92 63 00 	sts	0x0063, r1
 270:	10 92 62 00 	sts	0x0062, r1
	}
}
 274:	ff 91       	pop	r31
 276:	ef 91       	pop	r30
 278:	bf 91       	pop	r27
 27a:	af 91       	pop	r26
 27c:	9f 91       	pop	r25
 27e:	8f 91       	pop	r24
 280:	7f 91       	pop	r23
 282:	6f 91       	pop	r22
 284:	5f 91       	pop	r21
 286:	4f 91       	pop	r20
 288:	3f 91       	pop	r19
 28a:	2f 91       	pop	r18
 28c:	1f 91       	pop	r17
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <main>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 298:	88 e9       	ldi	r24, 0x98	; 152
 29a:	9a e3       	ldi	r25, 0x3A	; 58
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <main+0x4>

int main(void)
{
	_delay_ms(15); 								// Czekam a¿ wyœwietlacz LCD zostanie zainicjalizowany

	DDRA |= 0xF3;								// Ustawiam czêœæ linii A jako wyjœcie
 2a0:	8a b3       	in	r24, 0x1a	; 26
 2a2:	83 6f       	ori	r24, 0xF3	; 243
 2a4:	8a bb       	out	0x1a, r24	; 26
	DDRB |= 0xF0;								// Ustawiam kolumny jako wejœcie
 2a6:	87 b3       	in	r24, 0x17	; 23
 2a8:	80 6f       	ori	r24, 0xF0	; 240
 2aa:	87 bb       	out	0x17, r24	; 23

	PORTD |= 0x04;								// podci¹gam 2 PIND pod zasilanie
 2ac:	92 9a       	sbi	0x12, 2	; 18
	PORTB |= 0x0F;								// Podci¹gam wiersze pod zasilanie
 2ae:	88 b3       	in	r24, 0x18	; 24
 2b0:	8f 60       	ori	r24, 0x0F	; 15
 2b2:	88 bb       	out	0x18, r24	; 24

	MCUCR |= 0x0A;								// Ustawienie aktywacji przerwania w tryb falling-edge;
 2b4:	85 b7       	in	r24, 0x35	; 53
 2b6:	8a 60       	ori	r24, 0x0A	; 10
 2b8:	85 bf       	out	0x35, r24	; 53

	GICR |= 0x40;								// W³¹czenie przerwañ INT0
 2ba:	8b b7       	in	r24, 0x3b	; 59
 2bc:	80 64       	ori	r24, 0x40	; 64
 2be:	8b bf       	out	0x3b, r24	; 59

	OCR0 = 156;                    				// ustawienie momentu przerwania na 156 (0,01s)
 2c0:	8c e9       	ldi	r24, 0x9C	; 156
 2c2:	8c bf       	out	0x3c, r24	; 60

    TIMSK |= 0x02;                 				// w³¹czenie przerwania TIMER0
 2c4:	89 b7       	in	r24, 0x39	; 57
 2c6:	82 60       	ori	r24, 0x02	; 2
 2c8:	89 bf       	out	0x39, r24	; 57

    TCCR0 |= 0b01000100;            			// w³¹czam tryb CTC i ustawiam prescaler na 1/256
 2ca:	83 b7       	in	r24, 0x33	; 51
 2cc:	84 64       	ori	r24, 0x44	; 68
 2ce:	83 bf       	out	0x33, r24	; 51

	
	sendHalfByte(0x30);							// Inicjalizacja standardowymi bajtami
 2d0:	80 e3       	ldi	r24, 0x30	; 48
 2d2:	0e 94 51 00 	call	0xa2	; 0xa2 <sendHalfByte>
 2d6:	88 e8       	ldi	r24, 0x88	; 136
 2d8:	93 e1       	ldi	r25, 0x13	; 19
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <main+0x42>
	_delay_ms(5);								// Czekam zgodnie z dokumentacj¹
	sendHalfByte(0x30);							
 2de:	80 e3       	ldi	r24, 0x30	; 48
 2e0:	0e 94 51 00 	call	0xa2	; 0xa2 <sendHalfByte>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2e4:	86 e8       	ldi	r24, 0x86	; 134
 2e6:	8a 95       	dec	r24
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <main+0x4e>
	_delay_us(101);
	sendCommand(0x32);
 2ea:	82 e3       	ldi	r24, 0x32	; 50
 2ec:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	sendCommand(0x28);							// Ustawiam tryb 2 linii i znaków 5x8
 2f0:	88 e2       	ldi	r24, 0x28	; 40
 2f2:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	sendCommand(0x08);							// Wy³¹czam wyœwietlacz zgodnie z dokumentacj¹
 2f6:	88 e0       	ldi	r24, 0x08	; 8
 2f8:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	sendCommand(0x01);							// Czyszczê wyœwietlacz
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	sendCommand(0x06);							// Ustawiam kierunek wyprowadzania tekstu i sposób wyprowadzania na wyœwietlacz
 302:	86 e0       	ldi	r24, 0x06	; 6
 304:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	sendCommand(0x0F);							// W³¹czam wyœwietlacz i ustawiam znak na pozycji kursora na miganie
 308:	8f e0       	ldi	r24, 0x0F	; 15
 30a:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	PORTA |= 0x01;								// Prze³¹czam LCD w tryb wprowadzania danych
 30e:	d8 9a       	sbi	0x1b, 0	; 27

	sei();										// W³¹czam obs³uge przerwañ
 310:	78 94       	sei
 312:	ff cf       	rjmp	.-2      	; 0x312 <main+0x7a>

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
