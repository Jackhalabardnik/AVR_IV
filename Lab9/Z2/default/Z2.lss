
Z2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000354  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000354  000003e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800064  00800064  000003ec  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000115  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d3  00000000  00000000  00000521  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000195  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f7  00000000  00000000  00000c89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001080  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ce  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e5  00000000  00000000  000012de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_10>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000054 <transcode>:
  54:	30 58 58 43 34 31 58 58 37 35 32 58 39 38 36 33     0XXC41XX752X9863

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e4 e5       	ldi	r30, 0x54	; 84
  78:	f3 e0       	ldi	r31, 0x03	; 3
  7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>

00000086 <__do_clear_bss>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	a4 e6       	ldi	r26, 0x64	; 100
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	ac 36       	cpi	r26, 0x6C	; 108
  92:	b1 07       	cpc	r27, r17
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 71 01 	call	0x2e2	; 0x2e2 <main>
  9a:	0c 94 a8 01 	jmp	0x350	; 0x350 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <sendHalfByte>:

const char transcode[] PROGMEM  = {'0', 'X', 'X', 'C', '4', '1', 'X', 'X', '7', '5', '2', 'X', '9', '8', '6', '3' }; // Umieszczam dane w pamiêci programu

void sendHalfByte(char data)
{		
	PORTA |= 0x02; 								// Wysy³am flagê ENABLE
  a2:	d9 9a       	sbi	0x1b, 1	; 27
	PORTA = (PORTA & 0x0F) | (data & 0xF0);		// Wysy³am pó³ bajta
  a4:	9b b3       	in	r25, 0x1b	; 27
  a6:	80 7f       	andi	r24, 0xF0	; 240
  a8:	9f 70       	andi	r25, 0x0F	; 15
  aa:	89 2b       	or	r24, r25
  ac:	8b bb       	out	0x1b, r24	; 27
	PORTA &= 0xFD;								// Usuwam flagê ENABLE
  ae:	d9 98       	cbi	0x1b, 1	; 27
}
  b0:	08 95       	ret

000000b2 <sendByte>:

void sendByte(char data)
{
  b2:	1f 93       	push	r17
  b4:	18 2f       	mov	r17, r24
	sendHalfByte(data);							// Wysy³am górn¹ po³owê bajtu
  b6:	0e 94 51 00 	call	0xa2	; 0xa2 <sendHalfByte>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	8a 95       	dec	r24
  be:	f1 f7       	brne	.-4      	; 0xbc <sendByte+0xa>
	_delay_us(2);								// OpóŸnienie w celu wykrycia stanu "0" na pinie ENABLE
	sendHalfByte(data << 4);					// Wysy³am doln¹ po³owê bajtu
  c0:	81 2f       	mov	r24, r17
  c2:	82 95       	swap	r24
  c4:	80 7f       	andi	r24, 0xF0	; 240
  c6:	0e 94 51 00 	call	0xa2	; 0xa2 <sendHalfByte>
}
  ca:	1f 91       	pop	r17
  cc:	08 95       	ret

000000ce <sendCommand>:

void sendCommand(char data)
{
	sendByte(data);								// Wysy³am komendê
  ce:	0e 94 59 00 	call	0xb2	; 0xb2 <sendByte>
  d2:	82 e4       	ldi	r24, 0x42	; 66
  d4:	8a 95       	dec	r24
  d6:	f1 f7       	brne	.-4      	; 0xd4 <sendCommand+0x6>
	_delay_us(50);								// Czekam na przetworzenie komendy
}
  d8:	08 95       	ret

000000da <sendChar>:

void sendChar(char data)
{
	sendByte(data);								// Wysy³am znak
  da:	0e 94 59 00 	call	0xb2	; 0xb2 <sendByte>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  de:	8c ed       	ldi	r24, 0xDC	; 220
  e0:	95 e0       	ldi	r25, 0x05	; 5
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <sendChar+0x8>
	_delay_us(1500);							// Czekam na wypisanie znaku
}
  e6:	08 95       	ret

000000e8 <debinary>:

int debinary(int x)							// wyodrêbniam numer bitu na podstawie wartoœci dziesiêtnej
{
  e8:	9c 01       	movw	r18, r24
	if(x == 8) {
  ea:	88 30       	cpi	r24, 0x08	; 8
  ec:	91 05       	cpc	r25, r1
  ee:	19 f4       	brne	.+6      	; 0xf6 <debinary+0xe>
  f0:	24 e0       	ldi	r18, 0x04	; 4
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	05 c0       	rjmp	.+10     	; 0x100 <debinary+0x18>
		return 4;
	}
	if(x == 4) {
  f6:	84 30       	cpi	r24, 0x04	; 4
  f8:	91 05       	cpc	r25, r1
  fa:	11 f4       	brne	.+4      	; 0x100 <debinary+0x18>
  fc:	23 e0       	ldi	r18, 0x03	; 3
  fe:	30 e0       	ldi	r19, 0x00	; 0
		return 3;
	}
	return x;
}
 100:	c9 01       	movw	r24, r18
 102:	08 95       	ret

00000104 <clear_LCD>:

void clear_LCD()								// Funkcja czyszcz¹ca LCD
{
	PORTA &= 0xFE;								// Prze³¹czam LCD w tryb wprowadzania komend
 104:	d8 98       	cbi	0x1b, 0	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <clear_LCD+0x4>
	_delay_us(2);								// OpóŸnienie w celu wykrycia stanu "0" na pinie RS
	sendCommand(0x01);							// Czyszczê wyœwietlacz
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	sendCommand(0x06);							// Ustawiam poprzedni kierunek wyprowadzania
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	was_up = 1;									// Resetujê flagê przeniesiena na dó³
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 62 00 	sts	0x0062, r24
	write_counter = 0;							// Resetujê licznik wpisywania na ekran
 11e:	10 92 67 00 	sts	0x0067, r1
 122:	10 92 66 00 	sts	0x0066, r1
	PORTA |= 0x01;								// Prze³¹czam LCD w tryb wprowadzania danych
 126:	d8 9a       	sbi	0x1b, 0	; 27
}
 128:	08 95       	ret

0000012a <__vector_10>:

ISR (TIMER0_COMP_vect) {        								// Przerwanie TIMER0
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
	PORTB = (~_BV(multi_counter+4) & 0xF0) | (PORTB & 0x0F);	// Ustawiam 0 na dany bit w PORTD a resztê starszych bitów na 1
 150:	20 91 64 00 	lds	r18, 0x0064
 154:	30 91 65 00 	lds	r19, 0x0065
 158:	48 b3       	in	r20, 0x18	; 24
 15a:	2c 5f       	subi	r18, 0xFC	; 252
 15c:	3f 4f       	sbci	r19, 0xFF	; 255
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <__vector_10+0x3e>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	2a 95       	dec	r18
 16a:	e2 f7       	brpl	.-8      	; 0x164 <__vector_10+0x3a>
 16c:	80 95       	com	r24
 16e:	80 7f       	andi	r24, 0xF0	; 240
 170:	4f 70       	andi	r20, 0x0F	; 15
 172:	84 2b       	or	r24, r20
 174:	88 bb       	out	0x18, r24	; 24
	if((PINB & 0x0F) != 0x0F)									// Sprawdzam czy dany klawisz jest naciœniêty
 176:	86 b3       	in	r24, 0x16	; 22
 178:	8f 70       	andi	r24, 0x0F	; 15
 17a:	8f 30       	cpi	r24, 0x0F	; 15
 17c:	09 f4       	brne	.+2      	; 0x180 <__vector_10+0x56>
 17e:	7b c0       	rjmp	.+246    	; 0x276 <__vector_10+0x14c>
	{
		char code = pgm_read_byte_near(transcode + ((debinary(~PINB & 0x0F)-1) * 4) + multi_counter);	// Dekodujê znak z klawiatury
 180:	86 b3       	in	r24, 0x16	; 22
 182:	e8 2f       	mov	r30, r24
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	e0 95       	com	r30
 188:	f0 95       	com	r31
 18a:	ef 70       	andi	r30, 0x0F	; 15
 18c:	f0 70       	andi	r31, 0x00	; 0
	_delay_us(1500);							// Czekam na wypisanie znaku
}

int debinary(int x)							// wyodrêbniam numer bitu na podstawie wartoœci dziesiêtnej
{
	if(x == 8) {
 18e:	e8 30       	cpi	r30, 0x08	; 8
 190:	f1 05       	cpc	r31, r1
 192:	19 f4       	brne	.+6      	; 0x19a <__vector_10+0x70>
 194:	e4 e0       	ldi	r30, 0x04	; 4
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	05 c0       	rjmp	.+10     	; 0x1a4 <__vector_10+0x7a>
		return 4;
	}
	if(x == 4) {
 19a:	e4 30       	cpi	r30, 0x04	; 4
 19c:	f1 05       	cpc	r31, r1
 19e:	11 f4       	brne	.+4      	; 0x1a4 <__vector_10+0x7a>
 1a0:	e3 e0       	ldi	r30, 0x03	; 3
 1a2:	f0 e0       	ldi	r31, 0x00	; 0

ISR (TIMER0_COMP_vect) {        								// Przerwanie TIMER0
	PORTB = (~_BV(multi_counter+4) & 0xF0) | (PORTB & 0x0F);	// Ustawiam 0 na dany bit w PORTD a resztê starszych bitów na 1
	if((PINB & 0x0F) != 0x0F)									// Sprawdzam czy dany klawisz jest naciœniêty
	{
		char code = pgm_read_byte_near(transcode + ((debinary(~PINB & 0x0F)-1) * 4) + multi_counter);	// Dekodujê znak z klawiatury
 1a4:	80 91 64 00 	lds	r24, 0x0064
 1a8:	90 91 65 00 	lds	r25, 0x0065
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	ee 0f       	add	r30, r30
 1b0:	ff 1f       	adc	r31, r31
 1b2:	ee 0f       	add	r30, r30
 1b4:	ff 1f       	adc	r31, r31
 1b6:	e8 0f       	add	r30, r24
 1b8:	f9 1f       	adc	r31, r25
 1ba:	ec 5a       	subi	r30, 0xAC	; 172
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	04 91       	lpm	r16, Z+
		if(code != last_character || no_entry)							// Zapobiegam niepotrzebym wywo³aniom timera
 1c0:	80 91 60 00 	lds	r24, 0x0060
 1c4:	08 17       	cp	r16, r24
 1c6:	21 f4       	brne	.+8      	; 0x1d0 <__vector_10+0xa6>
 1c8:	80 91 61 00 	lds	r24, 0x0061
 1cc:	88 23       	and	r24, r24
 1ce:	59 f1       	breq	.+86     	; 0x226 <__vector_10+0xfc>
		{
			if(code == 'C')												// Sprawdzam czy trzeba czyœciæ ekran
 1d0:	03 34       	cpi	r16, 0x43	; 67
 1d2:	19 f4       	brne	.+6      	; 0x1da <__vector_10+0xb0>
			{
				clear_LCD();
 1d4:	0e 94 82 00 	call	0x104	; 0x104 <clear_LCD>
 1d8:	40 c0       	rjmp	.+128    	; 0x25a <__vector_10+0x130>
				clear_counter++;										// Zwiêkszam licznik 
			}
			else if(code != 'X')
 1da:	08 35       	cpi	r16, 0x58	; 88
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <__vector_10+0xb6>
 1de:	46 c0       	rjmp	.+140    	; 0x26c <__vector_10+0x142>
			{
				if(write_counter < 16)							// Sprawdzam czy mo¿na wpisaæ kolejny znak
 1e0:	80 91 66 00 	lds	r24, 0x0066
 1e4:	90 91 67 00 	lds	r25, 0x0067
 1e8:	40 97       	sbiw	r24, 0x10	; 16
 1ea:	54 f4       	brge	.+20     	; 0x200 <__vector_10+0xd6>
				{
					write_counter++;
 1ec:	80 91 66 00 	lds	r24, 0x0066
 1f0:	90 91 67 00 	lds	r25, 0x0067
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	90 93 67 00 	sts	0x0067, r25
 1fa:	80 93 66 00 	sts	0x0066, r24
 1fe:	0f c0       	rjmp	.+30     	; 0x21e <__vector_10+0xf4>
				}
				else if(!was_changed)
 200:	80 91 69 00 	lds	r24, 0x0069
 204:	88 23       	and	r24, r24
 206:	59 f4       	brne	.+22     	; 0x21e <__vector_10+0xf4>
				{
					PORTA &= 0xFE;								// Prze³¹czam LCD w tryb wprowadzania komend
 208:	d8 98       	cbi	0x1b, 0	; 27
 20a:	12 e0       	ldi	r17, 0x02	; 2
 20c:	81 2f       	mov	r24, r17
 20e:	8a 95       	dec	r24
 210:	f1 f7       	brne	.-4      	; 0x20e <__vector_10+0xe4>
					_delay_us(2);								// OpóŸnienie w celu wykrycia stanu "0" na pinie RS
					sendCommand(0x07);							// Ustawiam tryb wprowadzania od prawej z cofaniem siê
 212:	87 e0       	ldi	r24, 0x07	; 7
 214:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
					PORTA |= 0x01;								// Prze³¹czam LCD w tryb wprowadzania danych
 218:	d8 9a       	sbi	0x1b, 0	; 27
 21a:	1a 95       	dec	r17
 21c:	f1 f7       	brne	.-4      	; 0x21a <__vector_10+0xf0>
					_delay_us(2);
				}
				sendChar(code);
 21e:	80 2f       	mov	r24, r16
 220:	0e 94 6d 00 	call	0xda	; 0xda <sendChar>
 224:	23 c0       	rjmp	.+70     	; 0x26c <__vector_10+0x142>
			}
		}
		else if(code == 'C')
 226:	03 34       	cpi	r16, 0x43	; 67
 228:	09 f5       	brne	.+66     	; 0x26c <__vector_10+0x142>
		{
			if(clear_counter > 5 && was_up)				// Sprawdzam czy po 1s mogê przenieœæ kursor na dó³
 22a:	80 91 6a 00 	lds	r24, 0x006A
 22e:	90 91 6b 00 	lds	r25, 0x006B
 232:	06 97       	sbiw	r24, 0x06	; 6
 234:	94 f0       	brlt	.+36     	; 0x25a <__vector_10+0x130>
 236:	80 91 62 00 	lds	r24, 0x0062
 23a:	88 23       	and	r24, r24
 23c:	71 f0       	breq	.+28     	; 0x25a <__vector_10+0x130>
			{
				PORTA &= 0xFE;								// Prze³¹czam LCD w tryb wprowadzania komend
 23e:	d8 98       	cbi	0x1b, 0	; 27
 240:	12 e0       	ldi	r17, 0x02	; 2
 242:	81 2f       	mov	r24, r17
 244:	8a 95       	dec	r24
 246:	f1 f7       	brne	.-4      	; 0x244 <__vector_10+0x11a>
				_delay_us(2);								// OpóŸnienie w celu wykrycia stanu "0" na pinie RS
				sendCommand(0xC0);							// Ustawiam LCD do nowej linii
 248:	80 ec       	ldi	r24, 0xC0	; 192
 24a:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
				PORTA |= 0x01;								// Prze³¹czam LCD w tryb wprowadzania danych
 24e:	d8 9a       	sbi	0x1b, 0	; 27
 250:	1a 95       	dec	r17
 252:	f1 f7       	brne	.-4      	; 0x250 <__vector_10+0x126>
				_delay_us(2);
				was_up = 0;
 254:	10 92 62 00 	sts	0x0062, r1
 258:	09 c0       	rjmp	.+18     	; 0x26c <__vector_10+0x142>
			}
			else
			{
				clear_counter++;
 25a:	80 91 6a 00 	lds	r24, 0x006A
 25e:	90 91 6b 00 	lds	r25, 0x006B
 262:	01 96       	adiw	r24, 0x01	; 1
 264:	90 93 6b 00 	sts	0x006B, r25
 268:	80 93 6a 00 	sts	0x006A, r24
			}
		}
		last_character = code;									// Zapamiêtujê kod klawisza
 26c:	00 93 60 00 	sts	0x0060, r16
		was_char_pressed = 1;									// Zauwa¿am ¿e wcisn¹³em jakiœ klawisz
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 93 68 00 	sts	0x0068, r24
	}
	multi_counter++;											// zwiêkszam licznik multipleksacji i w razie czego wracam do 0
 276:	80 91 64 00 	lds	r24, 0x0064
 27a:	90 91 65 00 	lds	r25, 0x0065
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	90 93 65 00 	sts	0x0065, r25
 284:	80 93 64 00 	sts	0x0064, r24
	if(multi_counter >= 4) 
 288:	80 91 64 00 	lds	r24, 0x0064
 28c:	90 91 65 00 	lds	r25, 0x0065
 290:	04 97       	sbiw	r24, 0x04	; 4
 292:	a4 f0       	brlt	.+40     	; 0x2bc <__vector_10+0x192>
	{
		if(was_char_pressed)									// sprawdzam czy w poprzedniej iteracji zosta³ naciœniêty jakiœ klawisz
 294:	80 91 68 00 	lds	r24, 0x0068
 298:	88 23       	and	r24, r24
 29a:	39 f0       	breq	.+14     	; 0x2aa <__vector_10+0x180>
		{
			no_entry = 0;										// ustawiam flagê braku wpisywania na wartoœæ fa³sz
 29c:	10 92 61 00 	sts	0x0061, r1
			clear_counter = 0;									// Resetujê
 2a0:	10 92 6b 00 	sts	0x006B, r1
 2a4:	10 92 6a 00 	sts	0x006A, r1
 2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <__vector_10+0x186>
		}
		else
		{
			no_entry = 1;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	80 93 61 00 	sts	0x0061, r24
		}
		was_char_pressed = 0;									// resetujê flagê sprawdzaj¹c¹ czy nacisn¹³em jakiœ klawisz
 2b0:	10 92 68 00 	sts	0x0068, r1
		multi_counter = 0;
 2b4:	10 92 65 00 	sts	0x0065, r1
 2b8:	10 92 64 00 	sts	0x0064, r1
	}
}
 2bc:	ff 91       	pop	r31
 2be:	ef 91       	pop	r30
 2c0:	bf 91       	pop	r27
 2c2:	af 91       	pop	r26
 2c4:	9f 91       	pop	r25
 2c6:	8f 91       	pop	r24
 2c8:	7f 91       	pop	r23
 2ca:	6f 91       	pop	r22
 2cc:	5f 91       	pop	r21
 2ce:	4f 91       	pop	r20
 2d0:	3f 91       	pop	r19
 2d2:	2f 91       	pop	r18
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <main>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2e2:	88 e9       	ldi	r24, 0x98	; 152
 2e4:	9a e3       	ldi	r25, 0x3A	; 58
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <main+0x4>

int main(void)
{
	_delay_ms(15); 								// Czekam a¿ wyœwietlacz LCD zostanie zainicjalizowany

	DDRA |= 0xF3;								// Ustawiam czêœæ linii A jako wyjœcie
 2ea:	8a b3       	in	r24, 0x1a	; 26
 2ec:	83 6f       	ori	r24, 0xF3	; 243
 2ee:	8a bb       	out	0x1a, r24	; 26
	DDRB |= 0xF0;								// Ustawiam kolumny jako wejœcie
 2f0:	87 b3       	in	r24, 0x17	; 23
 2f2:	80 6f       	ori	r24, 0xF0	; 240
 2f4:	87 bb       	out	0x17, r24	; 23
	PORTB |= 0x0F;								// Podci¹gam wiersze pod zasilanie
 2f6:	88 b3       	in	r24, 0x18	; 24
 2f8:	8f 60       	ori	r24, 0x0F	; 15
 2fa:	88 bb       	out	0x18, r24	; 24

	OCR0 = 156;                    				// ustawienie momentu przerwania na 156 (0,01s)
 2fc:	8c e9       	ldi	r24, 0x9C	; 156
 2fe:	8c bf       	out	0x3c, r24	; 60

    TIMSK |= 0x02;                 				// w³¹czenie przerwania TIMER0
 300:	89 b7       	in	r24, 0x39	; 57
 302:	82 60       	ori	r24, 0x02	; 2
 304:	89 bf       	out	0x39, r24	; 57

    TCCR0 |= 0b01000100;            			// w³¹czam tryb CTC i ustawiam prescaler na 1/256
 306:	83 b7       	in	r24, 0x33	; 51
 308:	84 64       	ori	r24, 0x44	; 68
 30a:	83 bf       	out	0x33, r24	; 51

	
	sendHalfByte(0x30);							// Inicjalizacja standardowymi bajtami
 30c:	80 e3       	ldi	r24, 0x30	; 48
 30e:	0e 94 51 00 	call	0xa2	; 0xa2 <sendHalfByte>
 312:	88 e8       	ldi	r24, 0x88	; 136
 314:	93 e1       	ldi	r25, 0x13	; 19
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <main+0x34>
	_delay_ms(5);								// Czekam zgodnie z dokumentacj¹
	sendHalfByte(0x30);							
 31a:	80 e3       	ldi	r24, 0x30	; 48
 31c:	0e 94 51 00 	call	0xa2	; 0xa2 <sendHalfByte>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 320:	86 e8       	ldi	r24, 0x86	; 134
 322:	8a 95       	dec	r24
 324:	f1 f7       	brne	.-4      	; 0x322 <main+0x40>
	_delay_us(101);
	sendCommand(0x32);
 326:	82 e3       	ldi	r24, 0x32	; 50
 328:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	sendCommand(0x28);							// Ustawiam tryb 2 linii i znaków 5x8
 32c:	88 e2       	ldi	r24, 0x28	; 40
 32e:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	sendCommand(0x08);							// Wy³¹czam wyœwietlacz zgodnie z dokumentacj¹
 332:	88 e0       	ldi	r24, 0x08	; 8
 334:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	sendCommand(0x01);							// Czyszczê wyœwietlacz
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	sendCommand(0x06);							// Ustawiam kierunek wyprowadzania tekstu i sposób wyprowadzania na wyœwietlacz
 33e:	86 e0       	ldi	r24, 0x06	; 6
 340:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	sendCommand(0x0F);							// W³¹czam wyœwietlacz i ustawiam znak na pozycji kursora na miganie
 344:	8f e0       	ldi	r24, 0x0F	; 15
 346:	0e 94 67 00 	call	0xce	; 0xce <sendCommand>
	PORTA |= 0x01;								// Prze³¹czam LCD w tryb wprowadzania danych
 34a:	d8 9a       	sbi	0x1b, 0	; 27

	sei();										// W³¹czam obs³uge przerwañ
 34c:	78 94       	sei
 34e:	ff cf       	rjmp	.-2      	; 0x34e <main+0x6c>

00000350 <_exit>:
 350:	f8 94       	cli

00000352 <__stop_program>:
 352:	ff cf       	rjmp	.-2      	; 0x352 <__stop_program>
